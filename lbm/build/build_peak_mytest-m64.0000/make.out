/home/labuser/ssd/Code-Backup/llvm-project///build//bin/clang -m64 -c -o main.o -DSPEC -DNDEBUG -DSPEC_AUTO_SUPPRESS_OPENMP   -Ofast -mavx              -DSPEC_LP64  main.c
/home/labuser/ssd/Code-Backup/llvm-project///build//bin/clang -m64 -c -o lbm.o -DSPEC -DNDEBUG -DSPEC_AUTO_SUPPRESS_OPENMP   -Ofast -mavx              -DSPEC_LP64  lbm.c

LV: Checking a loop in "LBM_initializeGrid" from lbm.c
run-time check is enabled 
run-time check is enabled 
run-time check is enabled 
Finish!

; ModuleID = 'lbm.c'
source_filename = "lbm.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@.str = private unnamed_addr constant [49 x i8] c"LBM_allocateGrid: could not allocate %.1f MByte\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@.str.2 = private unnamed_addr constant [148 x i8] c"LBM_showGridStatistics:\0A\09nObstacleCells: %7i nAccelCells: %7i nFluidCells: %7i\0A\09minRho: %8.6f maxRho: %8.6f Mass: %e\0A\09minU  : %8.6f maxU  : %8.6f\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"%e %e %e\0A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"%f %f %f\0A\00", align 1
@.str.8 = private unnamed_addr constant [43 x i8] c"LBM_compareVelocityField: maxDiff = %e  \0A\0A\00", align 1

; Function Attrs: nounwind uwtable
define dso_local void @LBM_allocateGrid(double** nocapture %0) local_unnamed_addr #0 {
  %2 = tail call noalias dereferenceable_or_null(214400000) i8* @malloc(i64 214400000) #14
  %3 = bitcast double** %0 to i8**
  store i8* %2, i8** %3, align 8, !tbaa !2
  %4 = icmp eq i8* %2, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %1
  %6 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0), double 0x40698EF800000000)
  tail call void @exit(i32 1) #15
  unreachable

7:                                                ; preds = %1
  %8 = getelementptr inbounds i8, i8* %2, i64 3200000
  store i8* %8, i8** %3, align 8, !tbaa !2
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: inaccessiblememonly nofree nounwind willreturn
declare dso_local noalias noundef i8* @malloc(i64) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #3

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) local_unnamed_addr #4

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nounwind uwtable willreturn
define dso_local void @LBM_freeGrid(double** nocapture %0) local_unnamed_addr #5 {
  %2 = load double*, double** %0, align 8, !tbaa !2
  %3 = getelementptr inbounds double, double* %2, i64 -400000
  %4 = bitcast double* %3 to i8*
  tail call void @free(i8* nonnull %4) #14
  store double* null, double** %0, align 8, !tbaa !2
  ret void
}

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare dso_local void @free(i8* nocapture noundef) local_unnamed_addr #6

; Function Attrs: nofree norecurse nounwind uwtable writeonly
define dso_local void @LBM_initializeGrid(double* nocapture %0) local_unnamed_addr #7 {
  br label %2

2:                                                ; preds = %1, %2
  %3 = phi i64 [ -400000, %1 ], [ %23, %2 ]
  %4 = getelementptr inbounds double, double* %0, i64 %3
  %5 = bitcast double* %4 to <4 x double>*
  store <4 x double> <double 0x3FD5555555555555, double 0x3FAC71C71C71C71C, double 0x3FAC71C71C71C71C, double 0x3FAC71C71C71C71C>, <4 x double>* %5, align 8, !tbaa !6
  %6 = add nsw i64 %3, 4
  %7 = getelementptr inbounds double, double* %0, i64 %6
  %8 = bitcast double* %7 to <4 x double>*
  store <4 x double> <double 0x3FAC71C71C71C71C, double 0x3FAC71C71C71C71C, double 0x3FAC71C71C71C71C, double 0x3F9C71C71C71C71C>, <4 x double>* %8, align 8, !tbaa !6
  %9 = add nsw i64 %3, 8
  %10 = getelementptr inbounds double, double* %0, i64 %9
  %11 = bitcast double* %10 to <4 x double>*
  store <4 x double> <double 0x3F9C71C71C71C71C, double 0x3F9C71C71C71C71C, double 0x3F9C71C71C71C71C, double 0x3F9C71C71C71C71C>, <4 x double>* %11, align 8, !tbaa !6
  %12 = add nsw i64 %3, 12
  %13 = getelementptr inbounds double, double* %0, i64 %12
  %14 = bitcast double* %13 to <4 x double>*
  store <4 x double> <double 0x3F9C71C71C71C71C, double 0x3F9C71C71C71C71C, double 0x3F9C71C71C71C71C, double 0x3F9C71C71C71C71C>, <4 x double>* %14, align 8, !tbaa !6
  %15 = add nsw i64 %3, 16
  %16 = getelementptr inbounds double, double* %0, i64 %15
  %17 = bitcast double* %16 to <2 x double>*
  store <2 x double> <double 0x3F9C71C71C71C71C, double 0x3F9C71C71C71C71C>, <2 x double>* %17, align 8, !tbaa !6
  %18 = add nsw i64 %3, 18
  %19 = getelementptr inbounds double, double* %0, i64 %18
  store double 0x3F9C71C71C71C71C, double* %19, align 8, !tbaa !6
  %20 = add nsw i64 %3, 19
  %21 = getelementptr inbounds double, double* %0, i64 %20
  %22 = bitcast double* %21 to i32*
  store i32 0, i32* %22, align 4, !tbaa !8
  %23 = add nsw i64 %3, 20
  %24 = icmp slt i64 %3, 26399980
  br i1 %24, label %2, label %25, !llvm.loop !10

25:                                               ; preds = %2
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable willreturn
define dso_local void @LBM_swapGrids([26000000 x double]** nocapture %0, [26000000 x double]** nocapture %1) local_unnamed_addr #8 {
  %3 = load [26000000 x double]*, [26000000 x double]** %0, align 8, !tbaa !2
  %4 = load [26000000 x double]*, [26000000 x double]** %1, align 8, !tbaa !2
  store [26000000 x double]* %4, [26000000 x double]** %0, align 8, !tbaa !2
  store [26000000 x double]* %3, [26000000 x double]** %1, align 8, !tbaa !2
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @LBM_loadObstacleFile(double* nocapture %0, i8* nocapture readonly %1) local_unnamed_addr #9 {
  %3 = tail call %struct._IO_FILE* @fopen(i8* %1, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  br label %4

4:                                                ; preds = %2, %30
  %5 = phi i64 [ 0, %2 ], [ %32, %30 ]
  %6 = mul nuw nsw i64 %5, 10000
  br label %7

7:                                                ; preds = %4, %26
  %8 = phi i64 [ 0, %4 ], [ %28, %26 ]
  %9 = mul nuw nsw i64 %8, 100
  %10 = add nuw nsw i64 %9, %6
  br label %11

11:                                               ; preds = %7, %23
  %12 = phi i64 [ 0, %7 ], [ %24, %23 ]
  %13 = tail call i32 @fgetc(%struct._IO_FILE* %3)
  %14 = icmp eq i32 %13, 46
  br i1 %14, label %23, label %15

15:                                               ; preds = %11
  %16 = add nuw nsw i64 %10, %12
  %17 = mul nuw nsw i64 %16, 20
  %18 = add nuw nsw i64 %17, 19
  %19 = getelementptr inbounds double, double* %0, i64 %18
  %20 = bitcast double* %19 to i32*
  %21 = load i32, i32* %20, align 4, !tbaa !8
  %22 = or i32 %21, 1
  store i32 %22, i32* %20, align 4, !tbaa !8
  br label %23

23:                                               ; preds = %11, %15
  %24 = add nuw nsw i64 %12, 1
  %25 = icmp eq i64 %24, 100
  br i1 %25, label %26, label %11, !llvm.loop !12

26:                                               ; preds = %23
  %27 = tail call i32 @fgetc(%struct._IO_FILE* %3)
  %28 = add nuw nsw i64 %8, 1
  %29 = icmp eq i64 %28, 100
  br i1 %29, label %30, label %7, !llvm.loop !13

30:                                               ; preds = %26
  %31 = tail call i32 @fgetc(%struct._IO_FILE* %3)
  %32 = add nuw nsw i64 %5, 1
  %33 = icmp eq i64 %32, 130
  br i1 %33, label %34, label %4, !llvm.loop !14

34:                                               ; preds = %30
  %35 = tail call i32 @fclose(%struct._IO_FILE* %3)
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noalias noundef %struct._IO_FILE* @fopen(i8* nocapture noundef readonly, i8* nocapture noundef readonly) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @fgetc(%struct._IO_FILE* nocapture noundef) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @fclose(%struct._IO_FILE* nocapture noundef) local_unnamed_addr #3

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @LBM_initializeSpecialCellsForLDC(double* nocapture %0) local_unnamed_addr #10 {
  br label %2

2:                                                ; preds = %1, %93
  %3 = phi i64 [ -2, %1 ], [ %94, %93 ]
  %4 = icmp eq i64 %3, 1
  %5 = icmp eq i64 %3, 128
  %6 = or i1 %4, %5
  %7 = mul nsw i64 %3, 10000
  %8 = trunc i64 %3 to i32
  switch i32 %8, label %28 [
    i32 129, label %9
    i32 0, label %9
  ]

9:                                                ; preds = %2, %2
  br label %10

10:                                               ; preds = %25, %9
  %11 = phi i64 [ %26, %25 ], [ 0, %9 ]
  %12 = mul nuw nsw i64 %11, 100
  %13 = add nsw i64 %12, %7
  br label %14

14:                                               ; preds = %14, %10
  %15 = phi i64 [ %23, %14 ], [ 0, %10 ]
  %16 = add nsw i64 %13, %15
  %17 = mul nsw i64 %16, 20
  %18 = add nsw i64 %17, 19
  %19 = getelementptr inbounds double, double* %0, i64 %18
  %20 = bitcast double* %19 to i32*
  %21 = load i32, i32* %20, align 4, !tbaa !8
  %22 = or i32 %21, 1
  store i32 %22, i32* %20, align 4, !tbaa !8
  %23 = add nuw nsw i64 %15, 1
  %24 = icmp eq i64 %23, 100
  br i1 %24, label %25, label %14, !llvm.loop !15

25:                                               ; preds = %14
  %26 = add nuw nsw i64 %11, 1
  %27 = icmp eq i64 %26, 100
  br i1 %27, label %93, label %10, !llvm.loop !16

28:                                               ; preds = %2, %90
  %29 = phi i64 [ %91, %90 ], [ 0, %2 ]
  %30 = mul nuw nsw i64 %29, 100
  %31 = add nsw i64 %30, %7
  %32 = trunc i64 %29 to i32
  switch i32 %32, label %45 [
    i32 99, label %33
    i32 0, label %33
  ]

33:                                               ; preds = %28, %28
  br label %34

34:                                               ; preds = %34, %33
  %35 = phi i64 [ %43, %34 ], [ 0, %33 ]
  %36 = add nsw i64 %31, %35
  %37 = mul nsw i64 %36, 20
  %38 = add nsw i64 %37, 19
  %39 = getelementptr inbounds double, double* %0, i64 %38
  %40 = bitcast double* %39 to i32*
  %41 = load i32, i32* %40, align 4, !tbaa !8
  %42 = or i32 %41, 1
  store i32 %42, i32* %40, align 4, !tbaa !8
  %43 = add nuw nsw i64 %35, 1
  %44 = icmp eq i64 %43, 100
  br i1 %44, label %90, label %34, !llvm.loop !15

45:                                               ; preds = %28
  %46 = trunc i64 %29 to i32
  %47 = add i32 %46, -2
  %48 = icmp ult i32 %47, 96
  %49 = and i1 %48, %6
  br i1 %49, label %64, label %50

50:                                               ; preds = %45, %61
  %51 = phi i64 [ %62, %61 ], [ 0, %45 ]
  %52 = trunc i64 %51 to i32
  switch i32 %52, label %61 [
    i32 99, label %53
    i32 0, label %53
  ]

53:                                               ; preds = %50, %50
  %54 = add nsw i64 %31, %51
  %55 = mul nsw i64 %54, 20
  %56 = add nsw i64 %55, 19
  %57 = getelementptr inbounds double, double* %0, i64 %56
  %58 = bitcast double* %57 to i32*
  %59 = load i32, i32* %58, align 4, !tbaa !8
  %60 = or i32 %59, 1
  store i32 %60, i32* %58, align 4, !tbaa !8
  br label %61

61:                                               ; preds = %50, %53
  %62 = add nuw nsw i64 %51, 1
  %63 = icmp eq i64 %62, 100
  br i1 %63, label %90, label %50, !llvm.loop !15

64:                                               ; preds = %45, %87
  %65 = phi i64 [ %88, %87 ], [ 0, %45 ]
  %66 = trunc i64 %65 to i32
  switch i32 %66, label %75 [
    i32 99, label %67
    i32 0, label %67
  ]

67:                                               ; preds = %64, %64
  %68 = add nsw i64 %31, %65
  %69 = mul nsw i64 %68, 20
  %70 = add nsw i64 %69, 19
  %71 = getelementptr inbounds double, double* %0, i64 %70
  %72 = bitcast double* %71 to i32*
  %73 = load i32, i32* %72, align 4, !tbaa !8
  %74 = or i32 %73, 1
  store i32 %74, i32* %72, align 4, !tbaa !8
  br label %87

75:                                               ; preds = %64
  %76 = trunc i64 %65 to i32
  %77 = add i32 %76, -2
  %78 = icmp ult i32 %77, 96
  br i1 %78, label %79, label %87

79:                                               ; preds = %75
  %80 = add nsw i64 %31, %65
  %81 = mul nuw nsw i64 %80, 20
  %82 = add nuw nsw i64 %81, 19
  %83 = getelementptr inbounds double, double* %0, i64 %82
  %84 = bitcast double* %83 to i32*
  %85 = load i32, i32* %84, align 4, !tbaa !8
  %86 = or i32 %85, 2
  store i32 %86, i32* %84, align 4, !tbaa !8
  br label %87

87:                                               ; preds = %67, %75, %79
  %88 = add nuw nsw i64 %65, 1
  %89 = icmp eq i64 %88, 100
  br i1 %89, label %90, label %64, !llvm.loop !15

90:                                               ; preds = %34, %61, %87
  %91 = add nuw nsw i64 %29, 1
  %92 = icmp eq i64 %91, 100
  br i1 %92, label %93, label %28, !llvm.loop !16

93:                                               ; preds = %25, %90
  %94 = add nsw i64 %3, 1
  %95 = icmp eq i64 %94, 132
  br i1 %95, label %96, label %2, !llvm.loop !17

96:                                               ; preds = %93
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @LBM_initializeSpecialCellsForChannel(double* nocapture %0) local_unnamed_addr #10 {
  br label %2

2:                                                ; preds = %1, %39
  %3 = phi i64 [ -2, %1 ], [ %40, %39 ]
  %4 = mul nsw i64 %3, 10000
  br label %5

5:                                                ; preds = %2, %36
  %6 = phi i64 [ 0, %2 ], [ %37, %36 ]
  %7 = mul nuw nsw i64 %6, 100
  %8 = add nsw i64 %7, %4
  %9 = trunc i64 %6 to i32
  switch i32 %9, label %22 [
    i32 99, label %10
    i32 0, label %10
  ]

10:                                               ; preds = %5, %5
  br label %11

11:                                               ; preds = %11, %10
  %12 = phi i64 [ %20, %11 ], [ 0, %10 ]
  %13 = add nsw i64 %8, %12
  %14 = mul nsw i64 %13, 20
  %15 = add nsw i64 %14, 19
  %16 = getelementptr inbounds double, double* %0, i64 %15
  %17 = bitcast double* %16 to i32*
  %18 = load i32, i32* %17, align 4, !tbaa !8
  %19 = or i32 %18, 1
  store i32 %19, i32* %17, align 4, !tbaa !8
  %20 = add nuw nsw i64 %12, 1
  %21 = icmp eq i64 %20, 100
  br i1 %21, label %36, label %11, !llvm.loop !18

22:                                               ; preds = %5, %33
  %23 = phi i64 [ %34, %33 ], [ 0, %5 ]
  %24 = trunc i64 %23 to i32
  switch i32 %24, label %33 [
    i32 99, label %25
    i32 0, label %25
  ]

25:                                               ; preds = %22, %22
  %26 = add nsw i64 %8, %23
  %27 = mul nsw i64 %26, 20
  %28 = add nsw i64 %27, 19
  %29 = getelementptr inbounds double, double* %0, i64 %28
  %30 = bitcast double* %29 to i32*
  %31 = load i32, i32* %30, align 4, !tbaa !8
  %32 = or i32 %31, 1
  store i32 %32, i32* %30, align 4, !tbaa !8
  br label %33

33:                                               ; preds = %22, %25
  %34 = add nuw nsw i64 %23, 1
  %35 = icmp eq i64 %34, 100
  br i1 %35, label %36, label %22, !llvm.loop !18

36:                                               ; preds = %11, %33
  %37 = add nuw nsw i64 %6, 1
  %38 = icmp eq i64 %37, 100
  br i1 %38, label %39, label %5, !llvm.loop !19

39:                                               ; preds = %36
  %40 = add nsw i64 %3, 1
  %41 = icmp eq i64 %40, 132
  br i1 %41, label %42, label %2, !llvm.loop !20

42:                                               ; preds = %39
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @LBM_performStreamCollideBGK(double* readonly %0, double* %1) local_unnamed_addr #10 {
  br label %3

3:                                                ; preds = %2, %434
  %4 = phi i64 [ 0, %2 ], [ %435, %434 ]
  %5 = add nuw nsw i64 %4, 19
  %6 = getelementptr inbounds double, double* %0, i64 %5
  %7 = bitcast double* %6 to i32*
  %8 = load i32, i32* %7, align 4, !tbaa !8
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %105, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds double, double* %0, i64 %4
  %13 = load double, double* %12, align 8, !tbaa !6
  %14 = getelementptr inbounds double, double* %1, i64 %4
  store double %13, double* %14, align 8, !tbaa !6
  %15 = or i64 %4, 1
  %16 = getelementptr inbounds double, double* %0, i64 %15
  %17 = load double, double* %16, align 8, !tbaa !6
  %18 = add nsw i64 %4, -1998
  %19 = getelementptr inbounds double, double* %1, i64 %18
  store double %17, double* %19, align 8, !tbaa !6
  %20 = or i64 %4, 2
  %21 = getelementptr inbounds double, double* %0, i64 %20
  %22 = load double, double* %21, align 8, !tbaa !6
  %23 = add nuw nsw i64 %4, 2001
  %24 = getelementptr inbounds double, double* %1, i64 %23
  store double %22, double* %24, align 8, !tbaa !6
  %25 = or i64 %4, 3
  %26 = getelementptr inbounds double, double* %0, i64 %25
  %27 = load double, double* %26, align 8, !tbaa !6
  %28 = add nsw i64 %4, -16
  %29 = getelementptr inbounds double, double* %1, i64 %28
  store double %27, double* %29, align 8, !tbaa !6
  %30 = add nuw nsw i64 %4, 4
  %31 = getelementptr inbounds double, double* %0, i64 %30
  %32 = load double, double* %31, align 8, !tbaa !6
  %33 = add nuw nsw i64 %4, 23
  %34 = getelementptr inbounds double, double* %1, i64 %33
  store double %32, double* %34, align 8, !tbaa !6
  %35 = add nuw nsw i64 %4, 5
  %36 = getelementptr inbounds double, double* %0, i64 %35
  %37 = load double, double* %36, align 8, !tbaa !6
  %38 = add nsw i64 %4, -199994
  %39 = getelementptr inbounds double, double* %1, i64 %38
  store double %37, double* %39, align 8, !tbaa !6
  %40 = add nuw nsw i64 %4, 6
  %41 = getelementptr inbounds double, double* %0, i64 %40
  %42 = load double, double* %41, align 8, !tbaa !6
  %43 = add nuw nsw i64 %4, 200005
  %44 = getelementptr inbounds double, double* %1, i64 %43
  store double %42, double* %44, align 8, !tbaa !6
  %45 = add nuw nsw i64 %4, 7
  %46 = getelementptr inbounds double, double* %0, i64 %45
  %47 = load double, double* %46, align 8, !tbaa !6
  %48 = add nsw i64 %4, -2010
  %49 = getelementptr inbounds double, double* %1, i64 %48
  store double %47, double* %49, align 8, !tbaa !6
  %50 = add nuw nsw i64 %4, 8
  %51 = getelementptr inbounds double, double* %0, i64 %50
  %52 = load double, double* %51, align 8, !tbaa !6
  %53 = add nsw i64 %4, -1971
  %54 = getelementptr inbounds double, double* %1, i64 %53
  store double %52, double* %54, align 8, !tbaa !6
  %55 = add nuw nsw i64 %4, 9
  %56 = getelementptr inbounds double, double* %0, i64 %55
  %57 = load double, double* %56, align 8, !tbaa !6
  %58 = add nuw nsw i64 %4, 1988
  %59 = getelementptr inbounds double, double* %1, i64 %58
  store double %57, double* %59, align 8, !tbaa !6
  %60 = add nuw nsw i64 %4, 10
  %61 = getelementptr inbounds double, double* %0, i64 %60
  %62 = load double, double* %61, align 8, !tbaa !6
  %63 = add nuw nsw i64 %4, 2027
  %64 = getelementptr inbounds double, double* %1, i64 %63
  store double %62, double* %64, align 8, !tbaa !6
  %65 = add nuw nsw i64 %4, 11
  %66 = getelementptr inbounds double, double* %0, i64 %65
  %67 = load double, double* %66, align 8, !tbaa !6
  %68 = add nsw i64 %4, -201986
  %69 = getelementptr inbounds double, double* %1, i64 %68
  store double %67, double* %69, align 8, !tbaa !6
  %70 = add nuw nsw i64 %4, 12
  %71 = getelementptr inbounds double, double* %0, i64 %70
  %72 = load double, double* %71, align 8, !tbaa !6
  %73 = add nuw nsw i64 %4, 198013
  %74 = getelementptr inbounds double, double* %1, i64 %73
  store double %72, double* %74, align 8, !tbaa !6
  %75 = add nuw nsw i64 %4, 13
  %76 = getelementptr inbounds double, double* %0, i64 %75
  %77 = load double, double* %76, align 8, !tbaa !6
  %78 = add nsw i64 %4, -197988
  %79 = getelementptr inbounds double, double* %1, i64 %78
  store double %77, double* %79, align 8, !tbaa !6
  %80 = add nuw nsw i64 %4, 14
  %81 = getelementptr inbounds double, double* %0, i64 %80
  %82 = load double, double* %81, align 8, !tbaa !6
  %83 = add nuw nsw i64 %4, 202011
  %84 = getelementptr inbounds double, double* %1, i64 %83
  store double %82, double* %84, align 8, !tbaa !6
  %85 = add nuw nsw i64 %4, 15
  %86 = getelementptr inbounds double, double* %0, i64 %85
  %87 = load double, double* %86, align 8, !tbaa !6
  %88 = add nsw i64 %4, -200002
  %89 = getelementptr inbounds double, double* %1, i64 %88
  store double %87, double* %89, align 8, !tbaa !6
  %90 = add nuw nsw i64 %4, 16
  %91 = getelementptr inbounds double, double* %0, i64 %90
  %92 = load double, double* %91, align 8, !tbaa !6
  %93 = add nuw nsw i64 %4, 199997
  %94 = getelementptr inbounds double, double* %1, i64 %93
  store double %92, double* %94, align 8, !tbaa !6
  %95 = add nuw nsw i64 %4, 17
  %96 = getelementptr inbounds double, double* %0, i64 %95
  %97 = load double, double* %96, align 8, !tbaa !6
  %98 = add nsw i64 %4, -199964
  %99 = getelementptr inbounds double, double* %1, i64 %98
  store double %97, double* %99, align 8, !tbaa !6
  %100 = add nuw nsw i64 %4, 18
  %101 = getelementptr inbounds double, double* %0, i64 %100
  %102 = load double, double* %101, align 8, !tbaa !6
  %103 = add nuw nsw i64 %4, 200035
  %104 = getelementptr inbounds double, double* %1, i64 %103
  store double %102, double* %104, align 8, !tbaa !6
  br label %434

105:                                              ; preds = %3
  %106 = getelementptr inbounds double, double* %0, i64 %4
  %107 = load double, double* %106, align 8, !tbaa !6
  %108 = or i64 %4, 1
  %109 = getelementptr inbounds double, double* %0, i64 %108
  %110 = load double, double* %109, align 8, !tbaa !6
  %111 = fadd fast double %110, %107
  %112 = or i64 %4, 2
  %113 = getelementptr inbounds double, double* %0, i64 %112
  %114 = load double, double* %113, align 8, !tbaa !6
  %115 = fadd fast double %111, %114
  %116 = or i64 %4, 3
  %117 = getelementptr inbounds double, double* %0, i64 %116
  %118 = load double, double* %117, align 8, !tbaa !6
  %119 = fadd fast double %115, %118
  %120 = add nuw nsw i64 %4, 4
  %121 = getelementptr inbounds double, double* %0, i64 %120
  %122 = load double, double* %121, align 8, !tbaa !6
  %123 = fadd fast double %119, %122
  %124 = add nuw nsw i64 %4, 5
  %125 = getelementptr inbounds double, double* %0, i64 %124
  %126 = load double, double* %125, align 8, !tbaa !6
  %127 = fadd fast double %123, %126
  %128 = add nuw nsw i64 %4, 6
  %129 = getelementptr inbounds double, double* %0, i64 %128
  %130 = load double, double* %129, align 8, !tbaa !6
  %131 = fadd fast double %127, %130
  %132 = add nuw nsw i64 %4, 7
  %133 = getelementptr inbounds double, double* %0, i64 %132
  %134 = load double, double* %133, align 8, !tbaa !6
  %135 = fadd fast double %131, %134
  %136 = add nuw nsw i64 %4, 8
  %137 = getelementptr inbounds double, double* %0, i64 %136
  %138 = load double, double* %137, align 8, !tbaa !6
  %139 = fadd fast double %135, %138
  %140 = add nuw nsw i64 %4, 9
  %141 = getelementptr inbounds double, double* %0, i64 %140
  %142 = load double, double* %141, align 8, !tbaa !6
  %143 = fadd fast double %139, %142
  %144 = add nuw nsw i64 %4, 10
  %145 = getelementptr inbounds double, double* %0, i64 %144
  %146 = load double, double* %145, align 8, !tbaa !6
  %147 = fadd fast double %143, %146
  %148 = add nuw nsw i64 %4, 11
  %149 = getelementptr inbounds double, double* %0, i64 %148
  %150 = load double, double* %149, align 8, !tbaa !6
  %151 = fadd fast double %147, %150
  %152 = add nuw nsw i64 %4, 12
  %153 = getelementptr inbounds double, double* %0, i64 %152
  %154 = load double, double* %153, align 8, !tbaa !6
  %155 = fadd fast double %151, %154
  %156 = add nuw nsw i64 %4, 13
  %157 = getelementptr inbounds double, double* %0, i64 %156
  %158 = load double, double* %157, align 8, !tbaa !6
  %159 = fadd fast double %155, %158
  %160 = add nuw nsw i64 %4, 14
  %161 = getelementptr inbounds double, double* %0, i64 %160
  %162 = load double, double* %161, align 8, !tbaa !6
  %163 = fadd fast double %159, %162
  %164 = add nuw nsw i64 %4, 15
  %165 = getelementptr inbounds double, double* %0, i64 %164
  %166 = load double, double* %165, align 8, !tbaa !6
  %167 = fadd fast double %163, %166
  %168 = add nuw nsw i64 %4, 16
  %169 = getelementptr inbounds double, double* %0, i64 %168
  %170 = load double, double* %169, align 8, !tbaa !6
  %171 = fadd fast double %167, %170
  %172 = add nuw nsw i64 %4, 17
  %173 = getelementptr inbounds double, double* %0, i64 %172
  %174 = load double, double* %173, align 8, !tbaa !6
  %175 = fadd fast double %171, %174
  %176 = add nuw nsw i64 %4, 18
  %177 = getelementptr inbounds double, double* %0, i64 %176
  %178 = load double, double* %177, align 8, !tbaa !6
  %179 = fadd fast double %175, %178
  %180 = fadd fast double %118, %134
  %181 = fadd fast double %122, %138
  %182 = fadd fast double %180, %142
  %183 = fadd fast double %181, %146
  %184 = fsub fast double %182, %183
  %185 = fadd fast double %184, %166
  %186 = fadd fast double %185, %170
  %187 = fadd fast double %174, %178
  %188 = fsub fast double %186, %187
  %189 = fsub fast double %110, %114
  %190 = fadd fast double %189, %134
  %191 = fadd fast double %190, %138
  %192 = fadd fast double %142, %146
  %193 = fsub fast double %191, %192
  %194 = fadd fast double %193, %150
  %195 = fadd fast double %194, %154
  %196 = fadd fast double %158, %162
  %197 = fsub fast double %195, %196
  %198 = fadd fast double %126, %150
  %199 = fadd fast double %130, %154
  %200 = fadd fast double %198, %158
  %201 = fadd fast double %199, %162
  %202 = fadd fast double %200, %166
  %203 = fadd fast double %201, %170
  %204 = fadd fast double %202, %174
  %205 = fadd fast double %203, %178
  %206 = fsub fast double %204, %205
  %207 = fdiv fast double %188, %179
  %208 = fdiv fast double %197, %179
  %209 = fdiv fast double %206, %179
  %210 = and i32 %8, 2
  %211 = icmp eq i32 %210, 0
  %212 = select i1 %211, double %208, double 2.000000e-03
  %213 = select i1 %211, double %209, double 0.000000e+00
  %214 = select i1 %211, double %207, double 5.000000e-03
  %215 = fmul fast double %214, %214
  %216 = fmul fast double %212, %212
  %217 = fadd fast double %215, %216
  %218 = fmul fast double %213, %213
  %219 = fadd fast double %217, %218
  %220 = fmul fast double %219, 1.500000e+00
  %221 = fmul fast double %107, 0x3FEE666666666666
  %222 = fmul fast double %179, 0x3FE4CCCCCCCCCCCC
  %223 = fsub fast double 1.000000e+00, %220
  %224 = fmul fast double %222, %223
  %225 = fsub fast double %224, %221
  %226 = getelementptr inbounds double, double* %1, i64 %4
  store double %225, double* %226, align 8, !tbaa !6
  %227 = load double, double* %109, align 8, !tbaa !6
  %228 = fmul fast double %227, 0x3FEE666666666666
  %229 = fmul fast double %179, 0x3FBBBBBBBBBBBBBB
  %230 = fmul fast double %212, 4.500000e+00
  %231 = fadd fast double %230, 3.000000e+00
  %232 = fmul fast double %231, %212
  %233 = fadd fast double %232, 1.000000e+00
  %234 = fsub fast double %233, %220
  %235 = fmul fast double %234, %229
  %236 = fsub fast double %235, %228
  %237 = add nuw nsw i64 %4, 2001
  %238 = getelementptr inbounds double, double* %1, i64 %237
  store double %236, double* %238, align 8, !tbaa !6
  %239 = load double, double* %113, align 8, !tbaa !6
  %240 = fmul fast double %239, 0x3FEE666666666666
  %241 = fadd fast double %230, -3.000000e+00
  %242 = fmul fast double %241, %212
  %243 = fadd fast double %242, 1.000000e+00
  %244 = fsub fast double %243, %220
  %245 = fmul fast double %244, %229
  %246 = fsub fast double %245, %240
  %247 = add nsw i64 %4, -1998
  %248 = getelementptr inbounds double, double* %1, i64 %247
  store double %246, double* %248, align 8, !tbaa !6
  %249 = load double, double* %117, align 8, !tbaa !6
  %250 = fmul fast double %249, 0x3FEE666666666666
  %251 = fmul fast double %214, 4.500000e+00
  %252 = fadd fast double %251, 3.000000e+00
  %253 = fmul fast double %252, %214
  %254 = fadd fast double %253, 1.000000e+00
  %255 = fsub fast double %254, %220
  %256 = fmul fast double %255, %229
  %257 = fsub fast double %256, %250
  %258 = add nuw nsw i64 %4, 23
  %259 = getelementptr inbounds double, double* %1, i64 %258
  store double %257, double* %259, align 8, !tbaa !6
  %260 = load double, double* %121, align 8, !tbaa !6
  %261 = fmul fast double %260, 0x3FEE666666666666
  %262 = fadd fast double %251, -3.000000e+00
  %263 = fmul fast double %262, %214
  %264 = fadd fast double %263, 1.000000e+00
  %265 = fsub fast double %264, %220
  %266 = fmul fast double %265, %229
  %267 = fsub fast double %266, %261
  %268 = add nsw i64 %4, -16
  %269 = getelementptr inbounds double, double* %1, i64 %268
  store double %267, double* %269, align 8, !tbaa !6
  %270 = load double, double* %125, align 8, !tbaa !6
  %271 = fmul fast double %270, 0x3FEE666666666666
  %272 = fmul fast double %213, 4.500000e+00
  %273 = fadd fast double %272, 3.000000e+00
  %274 = fmul fast double %273, %213
  %275 = fadd fast double %274, 1.000000e+00
  %276 = fsub fast double %275, %220
  %277 = fmul fast double %276, %229
  %278 = fsub fast double %277, %271
  %279 = add nuw nsw i64 %4, 200005
  %280 = getelementptr inbounds double, double* %1, i64 %279
  store double %278, double* %280, align 8, !tbaa !6
  %281 = load double, double* %129, align 8, !tbaa !6
  %282 = fmul fast double %281, 0x3FEE666666666666
  %283 = fadd fast double %272, -3.000000e+00
  %284 = fmul fast double %283, %213
  %285 = fadd fast double %284, 1.000000e+00
  %286 = fsub fast double %285, %220
  %287 = fmul fast double %286, %229
  %288 = fsub fast double %287, %282
  %289 = add nsw i64 %4, -199994
  %290 = getelementptr inbounds double, double* %1, i64 %289
  store double %288, double* %290, align 8, !tbaa !6
  %291 = load double, double* %133, align 8, !tbaa !6
  %292 = fmul fast double %291, 0x3FEE666666666666
  %293 = fmul fast double %179, 0x3FABBBBBBBBBBBBB
  %294 = fadd fast double %214, %212
  %295 = fmul fast double %294, 4.500000e+00
  %296 = fadd fast double %295, 3.000000e+00
  %297 = fmul fast double %296, %294
  %298 = fadd fast double %297, 1.000000e+00
  %299 = fsub fast double %298, %220
  %300 = fmul fast double %299, %293
  %301 = fsub fast double %300, %292
  %302 = add nuw nsw i64 %4, 2027
  %303 = getelementptr inbounds double, double* %1, i64 %302
  store double %301, double* %303, align 8, !tbaa !6
  %304 = load double, double* %137, align 8, !tbaa !6
  %305 = fmul fast double %304, 0x3FEE666666666666
  %306 = fneg fast double %214
  %307 = fsub fast double %212, %214
  %308 = fmul fast double %307, 4.500000e+00
  %309 = fadd fast double %308, 3.000000e+00
  %310 = fmul fast double %309, %307
  %311 = fadd fast double %310, 1.000000e+00
  %312 = fsub fast double %311, %220
  %313 = fmul fast double %312, %293
  %314 = fsub fast double %313, %305
  %315 = add nuw nsw i64 %4, 1988
  %316 = getelementptr inbounds double, double* %1, i64 %315
  store double %314, double* %316, align 8, !tbaa !6
  %317 = load double, double* %141, align 8, !tbaa !6
  %318 = fmul fast double %317, 0x3FEE666666666666
  %319 = fsub fast double %214, %212
  %320 = fmul fast double %319, 4.500000e+00
  %321 = fadd fast double %320, 3.000000e+00
  %322 = fmul fast double %321, %319
  %323 = fadd fast double %322, 1.000000e+00
  %324 = fsub fast double %323, %220
  %325 = fmul fast double %324, %293
  %326 = fsub fast double %325, %318
  %327 = add nsw i64 %4, -1971
  %328 = getelementptr inbounds double, double* %1, i64 %327
  store double %326, double* %328, align 8, !tbaa !6
  %329 = load double, double* %145, align 8, !tbaa !6
  %330 = fmul fast double %329, 0x3FEE666666666666
  %331 = fsub fast double %306, %212
  %332 = fmul fast double %331, 4.500000e+00
  %333 = fadd fast double %332, 3.000000e+00
  %334 = fmul fast double %333, %331
  %335 = fadd fast double %334, 1.000000e+00
  %336 = fsub fast double %335, %220
  %337 = fmul fast double %336, %293
  %338 = fsub fast double %337, %330
  %339 = add nsw i64 %4, -2010
  %340 = getelementptr inbounds double, double* %1, i64 %339
  store double %338, double* %340, align 8, !tbaa !6
  %341 = load double, double* %149, align 8, !tbaa !6
  %342 = fmul fast double %341, 0x3FEE666666666666
  %343 = fadd fast double %212, %213
  %344 = fmul fast double %343, 4.500000e+00
  %345 = fadd fast double %344, 3.000000e+00
  %346 = fmul fast double %345, %343
  %347 = fadd fast double %346, 1.000000e+00
  %348 = fsub fast double %347, %220
  %349 = fmul fast double %348, %293
  %350 = fsub fast double %349, %342
  %351 = add nuw nsw i64 %4, 202011
  %352 = getelementptr inbounds double, double* %1, i64 %351
  store double %350, double* %352, align 8, !tbaa !6
  %353 = load double, double* %153, align 8, !tbaa !6
  %354 = fmul fast double %353, 0x3FEE666666666666
  %355 = fsub fast double %212, %213
  %356 = fmul fast double %355, 4.500000e+00
  %357 = fadd fast double %356, 3.000000e+00
  %358 = fmul fast double %357, %355
  %359 = fadd fast double %358, 1.000000e+00
  %360 = fsub fast double %359, %220
  %361 = fmul fast double %360, %293
  %362 = fsub fast double %361, %354
  %363 = add nsw i64 %4, -197988
  %364 = getelementptr inbounds double, double* %1, i64 %363
  store double %362, double* %364, align 8, !tbaa !6
  %365 = load double, double* %157, align 8, !tbaa !6
  %366 = fmul fast double %365, 0x3FEE666666666666
  %367 = fsub fast double %213, %212
  %368 = fmul fast double %367, 4.500000e+00
  %369 = fadd fast double %368, 3.000000e+00
  %370 = fmul fast double %369, %367
  %371 = fadd fast double %370, 1.000000e+00
  %372 = fsub fast double %371, %220
  %373 = fmul fast double %372, %293
  %374 = fsub fast double %373, %366
  %375 = add nuw nsw i64 %4, 198013
  %376 = getelementptr inbounds double, double* %1, i64 %375
  store double %374, double* %376, align 8, !tbaa !6
  %377 = load double, double* %161, align 8, !tbaa !6
  %378 = fmul fast double %377, 0x3FEE666666666666
  %379 = fadd fast double %344, -3.000000e+00
  %380 = fmul fast double %379, %343
  %381 = fadd fast double %223, %380
  %382 = fmul fast double %381, %293
  %383 = fsub fast double %382, %378
  %384 = add nsw i64 %4, -201986
  %385 = getelementptr inbounds double, double* %1, i64 %384
  store double %383, double* %385, align 8, !tbaa !6
  %386 = load double, double* %165, align 8, !tbaa !6
  %387 = fmul fast double %386, 0x3FEE666666666666
  %388 = fadd fast double %214, %213
  %389 = fmul fast double %388, 4.500000e+00
  %390 = fadd fast double %389, 3.000000e+00
  %391 = fmul fast double %390, %388
  %392 = fadd fast double %391, 1.000000e+00
  %393 = fsub fast double %392, %220
  %394 = fmul fast double %393, %293
  %395 = fsub fast double %394, %387
  %396 = add nuw nsw i64 %4, 200035
  %397 = getelementptr inbounds double, double* %1, i64 %396
  store double %395, double* %397, align 8, !tbaa !6
  %398 = load double, double* %169, align 8, !tbaa !6
  %399 = fmul fast double %398, 0x3FEE666666666666
  %400 = fsub fast double %214, %213
  %401 = fmul fast double %400, 4.500000e+00
  %402 = fadd fast double %401, 3.000000e+00
  %403 = fmul fast double %402, %400
  %404 = fadd fast double %403, 1.000000e+00
  %405 = fsub fast double %404, %220
  %406 = fmul fast double %405, %293
  %407 = fsub fast double %406, %399
  %408 = add nsw i64 %4, -199964
  %409 = getelementptr inbounds double, double* %1, i64 %408
  store double %407, double* %409, align 8, !tbaa !6
  %410 = load double, double* %173, align 8, !tbaa !6
  %411 = fmul fast double %410, 0x3FEE666666666666
  %412 = fsub fast double %213, %214
  %413 = fmul fast double %412, 4.500000e+00
  %414 = fadd fast double %413, 3.000000e+00
  %415 = fmul fast double %414, %412
  %416 = fadd fast double %415, 1.000000e+00
  %417 = fsub fast double %416, %220
  %418 = fmul fast double %417, %293
  %419 = fsub fast double %418, %411
  %420 = add nuw nsw i64 %4, 199997
  %421 = getelementptr inbounds double, double* %1, i64 %420
  store double %419, double* %421, align 8, !tbaa !6
  %422 = load double, double* %177, align 8, !tbaa !6
  %423 = fmul fast double %422, 0x3FEE666666666666
  %424 = fsub fast double %306, %213
  %425 = fmul fast double %424, 4.500000e+00
  %426 = fadd fast double %425, 3.000000e+00
  %427 = fmul fast double %426, %424
  %428 = fadd fast double %427, 1.000000e+00
  %429 = fsub fast double %428, %220
  %430 = fmul fast double %429, %293
  %431 = fsub fast double %430, %423
  %432 = add nsw i64 %4, -200002
  %433 = getelementptr inbounds double, double* %1, i64 %432
  store double %431, double* %433, align 8, !tbaa !6
  br label %434

434:                                              ; preds = %105, %11
  %435 = add nuw nsw i64 %4, 20
  %436 = icmp ult i64 %4, 25999980
  br i1 %436, label %3, label %437, !llvm.loop !21

437:                                              ; preds = %434
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @LBM_performStreamCollideTRT_Vec_RC(double* readonly %0, double* %1) local_unnamed_addr #11 {
  br label %3

3:                                                ; preds = %2, %615
  %4 = phi i32 [ 0, %2 ], [ %616, %615 ]
  %5 = add nsw i32 %4, 20
  %6 = add nsw i32 %4, 39
  %7 = sext i32 %6 to i64
  %8 = getelementptr inbounds double, double* %0, i64 %7
  %9 = bitcast double* %8 to i32*
  %10 = load i32, i32* %9, align 4, !tbaa !8
  %11 = and i32 %10, 1
  %12 = icmp eq i32 %11, 0
  br i1 %12, label %13, label %618

13:                                               ; preds = %3
  %14 = add nsw i32 %4, 19
  %15 = sext i32 %14 to i64
  %16 = getelementptr inbounds double, double* %0, i64 %15
  %17 = bitcast double* %16 to i32*
  %18 = load i32, i32* %17, align 4, !tbaa !8
  %19 = and i32 %18, 1
  %20 = icmp eq i32 %19, 0
  br i1 %20, label %21, label %618

21:                                               ; preds = %13
  %22 = sext i32 %5 to i64
  %23 = getelementptr inbounds double, double* %0, i64 %22
  %24 = load double, double* %23, align 8, !tbaa !6
  %25 = sext i32 %4 to i64
  %26 = getelementptr inbounds double, double* %0, i64 %25
  %27 = load double, double* %26, align 8, !tbaa !6
  %28 = insertelement <2 x double> undef, double %27, i32 0
  %29 = insertelement <2 x double> %28, double %24, i32 1
  %30 = add nsw i32 %4, 21
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds double, double* %0, i64 %31
  %33 = load double, double* %32, align 8, !tbaa !6
  %34 = add nsw i32 %4, 1
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds double, double* %0, i64 %35
  %37 = load double, double* %36, align 8, !tbaa !6
  %38 = insertelement <2 x double> undef, double %37, i32 0
  %39 = insertelement <2 x double> %38, double %33, i32 1
  %40 = add nsw i32 %4, 22
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds double, double* %0, i64 %41
  %43 = load double, double* %42, align 8, !tbaa !6
  %44 = add nsw i32 %4, 2
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds double, double* %0, i64 %45
  %47 = load double, double* %46, align 8, !tbaa !6
  %48 = insertelement <2 x double> undef, double %47, i32 0
  %49 = insertelement <2 x double> %48, double %43, i32 1
  %50 = add nsw i32 %4, 23
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds double, double* %0, i64 %51
  %53 = load double, double* %52, align 8, !tbaa !6
  %54 = add nsw i32 %4, 3
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds double, double* %0, i64 %55
  %57 = load double, double* %56, align 8, !tbaa !6
  %58 = insertelement <2 x double> undef, double %57, i32 0
  %59 = insertelement <2 x double> %58, double %53, i32 1
  %60 = add nsw i32 %4, 24
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds double, double* %0, i64 %61
  %63 = load double, double* %62, align 8, !tbaa !6
  %64 = add nsw i32 %4, 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds double, double* %0, i64 %65
  %67 = load double, double* %66, align 8, !tbaa !6
  %68 = insertelement <2 x double> undef, double %67, i32 0
  %69 = insertelement <2 x double> %68, double %63, i32 1
  %70 = add nsw i32 %4, 25
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds double, double* %0, i64 %71
  %73 = load double, double* %72, align 8, !tbaa !6
  %74 = add nsw i32 %4, 5
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds double, double* %0, i64 %75
  %77 = load double, double* %76, align 8, !tbaa !6
  %78 = insertelement <2 x double> undef, double %77, i32 0
  %79 = insertelement <2 x double> %78, double %73, i32 1
  %80 = add nsw i32 %4, 26
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds double, double* %0, i64 %81
  %83 = load double, double* %82, align 8, !tbaa !6
  %84 = add nsw i32 %4, 6
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds double, double* %0, i64 %85
  %87 = load double, double* %86, align 8, !tbaa !6
  %88 = insertelement <2 x double> undef, double %87, i32 0
  %89 = insertelement <2 x double> %88, double %83, i32 1
  %90 = add nsw i32 %4, 27
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds double, double* %0, i64 %91
  %93 = load double, double* %92, align 8, !tbaa !6
  %94 = add nsw i32 %4, 7
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds double, double* %0, i64 %95
  %97 = load double, double* %96, align 8, !tbaa !6
  %98 = insertelement <2 x double> undef, double %97, i32 0
  %99 = insertelement <2 x double> %98, double %93, i32 1
  %100 = add nsw i32 %4, 28
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds double, double* %0, i64 %101
  %103 = load double, double* %102, align 8, !tbaa !6
  %104 = add nsw i32 %4, 8
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds double, double* %0, i64 %105
  %107 = load double, double* %106, align 8, !tbaa !6
  %108 = insertelement <2 x double> undef, double %107, i32 0
  %109 = insertelement <2 x double> %108, double %103, i32 1
  %110 = add nsw i32 %4, 29
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds double, double* %0, i64 %111
  %113 = load double, double* %112, align 8, !tbaa !6
  %114 = add nsw i32 %4, 9
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds double, double* %0, i64 %115
  %117 = load double, double* %116, align 8, !tbaa !6
  %118 = insertelement <2 x double> undef, double %117, i32 0
  %119 = insertelement <2 x double> %118, double %113, i32 1
  %120 = add nsw i32 %4, 30
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds double, double* %0, i64 %121
  %123 = load double, double* %122, align 8, !tbaa !6
  %124 = add nsw i32 %4, 10
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds double, double* %0, i64 %125
  %127 = load double, double* %126, align 8, !tbaa !6
  %128 = insertelement <2 x double> undef, double %127, i32 0
  %129 = insertelement <2 x double> %128, double %123, i32 1
  %130 = add nsw i32 %4, 31
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds double, double* %0, i64 %131
  %133 = load double, double* %132, align 8, !tbaa !6
  %134 = add nsw i32 %4, 11
  %135 = sext i32 %134 to i64
  %136 = getelementptr inbounds double, double* %0, i64 %135
  %137 = load double, double* %136, align 8, !tbaa !6
  %138 = insertelement <2 x double> undef, double %137, i32 0
  %139 = insertelement <2 x double> %138, double %133, i32 1
  %140 = add nsw i32 %4, 32
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds double, double* %0, i64 %141
  %143 = load double, double* %142, align 8, !tbaa !6
  %144 = add nsw i32 %4, 12
  %145 = sext i32 %144 to i64
  %146 = getelementptr inbounds double, double* %0, i64 %145
  %147 = load double, double* %146, align 8, !tbaa !6
  %148 = insertelement <2 x double> undef, double %147, i32 0
  %149 = insertelement <2 x double> %148, double %143, i32 1
  %150 = add nsw i32 %4, 33
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds double, double* %0, i64 %151
  %153 = load double, double* %152, align 8, !tbaa !6
  %154 = add nsw i32 %4, 13
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds double, double* %0, i64 %155
  %157 = load double, double* %156, align 8, !tbaa !6
  %158 = insertelement <2 x double> undef, double %157, i32 0
  %159 = insertelement <2 x double> %158, double %153, i32 1
  %160 = add nsw i32 %4, 34
  %161 = sext i32 %160 to i64
  %162 = getelementptr inbounds double, double* %0, i64 %161
  %163 = load double, double* %162, align 8, !tbaa !6
  %164 = add nsw i32 %4, 14
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds double, double* %0, i64 %165
  %167 = load double, double* %166, align 8, !tbaa !6
  %168 = insertelement <2 x double> undef, double %167, i32 0
  %169 = insertelement <2 x double> %168, double %163, i32 1
  %170 = add nsw i32 %4, 35
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds double, double* %0, i64 %171
  %173 = load double, double* %172, align 8, !tbaa !6
  %174 = add nsw i32 %4, 15
  %175 = sext i32 %174 to i64
  %176 = getelementptr inbounds double, double* %0, i64 %175
  %177 = load double, double* %176, align 8, !tbaa !6
  %178 = insertelement <2 x double> undef, double %177, i32 0
  %179 = insertelement <2 x double> %178, double %173, i32 1
  %180 = add nsw i32 %4, 36
  %181 = sext i32 %180 to i64
  %182 = getelementptr inbounds double, double* %0, i64 %181
  %183 = load double, double* %182, align 8, !tbaa !6
  %184 = add nsw i32 %4, 16
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds double, double* %0, i64 %185
  %187 = load double, double* %186, align 8, !tbaa !6
  %188 = insertelement <2 x double> undef, double %187, i32 0
  %189 = insertelement <2 x double> %188, double %183, i32 1
  %190 = add nsw i32 %4, 37
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds double, double* %0, i64 %191
  %193 = load double, double* %192, align 8, !tbaa !6
  %194 = add nsw i32 %4, 17
  %195 = sext i32 %194 to i64
  %196 = getelementptr inbounds double, double* %0, i64 %195
  %197 = load double, double* %196, align 8, !tbaa !6
  %198 = insertelement <2 x double> undef, double %197, i32 0
  %199 = insertelement <2 x double> %198, double %193, i32 1
  %200 = add nsw i32 %4, 38
  %201 = sext i32 %200 to i64
  %202 = getelementptr inbounds double, double* %0, i64 %201
  %203 = load double, double* %202, align 8, !tbaa !6
  %204 = add nsw i32 %4, 18
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds double, double* %0, i64 %205
  %207 = load double, double* %206, align 8, !tbaa !6
  %208 = insertelement <2 x double> undef, double %207, i32 0
  %209 = insertelement <2 x double> %208, double %203, i32 1
  %210 = fadd fast <2 x double> %39, %29
  %211 = fadd fast <2 x double> %210, %49
  %212 = fadd fast <2 x double> %211, %59
  %213 = fadd fast <2 x double> %212, %69
  %214 = fadd fast <2 x double> %213, %79
  %215 = fadd fast <2 x double> %214, %89
  %216 = fadd fast <2 x double> %215, %99
  %217 = fadd fast <2 x double> %216, %109
  %218 = fadd fast <2 x double> %217, %119
  %219 = fadd fast <2 x double> %218, %129
  %220 = fadd fast <2 x double> %219, %139
  %221 = fadd fast <2 x double> %220, %149
  %222 = fadd fast <2 x double> %221, %159
  %223 = fadd fast <2 x double> %222, %169
  %224 = fadd fast <2 x double> %223, %179
  %225 = fadd fast <2 x double> %224, %189
  %226 = fadd fast <2 x double> %225, %199
  %227 = fadd fast <2 x double> %226, %209
  %228 = fsub fast <2 x double> %59, %69
  %229 = fadd fast <2 x double> %99, %228
  %230 = fadd fast <2 x double> %229, %119
  %231 = fadd fast <2 x double> %109, %129
  %232 = fsub fast <2 x double> %230, %231
  %233 = fadd fast <2 x double> %232, %179
  %234 = fadd fast <2 x double> %233, %189
  %235 = fadd fast <2 x double> %199, %209
  %236 = fsub fast <2 x double> %234, %235
  %237 = fsub fast <2 x double> %39, %49
  %238 = fadd fast <2 x double> %99, %237
  %239 = fadd fast <2 x double> %238, %109
  %240 = fadd fast <2 x double> %119, %129
  %241 = fsub fast <2 x double> %239, %240
  %242 = fadd fast <2 x double> %241, %139
  %243 = fadd fast <2 x double> %242, %149
  %244 = fadd fast <2 x double> %159, %169
  %245 = fsub fast <2 x double> %243, %244
  %246 = fsub fast <2 x double> %79, %89
  %247 = fadd fast <2 x double> %139, %246
  %248 = fadd fast <2 x double> %247, %159
  %249 = fadd fast <2 x double> %149, %169
  %250 = fadd fast <2 x double> %248, %179
  %251 = fadd fast <2 x double> %249, %189
  %252 = fadd fast <2 x double> %250, %199
  %253 = fadd fast <2 x double> %251, %209
  %254 = fsub fast <2 x double> %252, %253
  %255 = fdiv fast <2 x double> %236, %227
  %256 = fdiv fast <2 x double> %245, %227
  %257 = fdiv fast <2 x double> %254, %227
  %258 = and i32 %18, 2
  %259 = icmp eq i32 %258, 0
  %260 = insertelement <2 x double> %255, double 5.000000e-03, i32 0
  %261 = insertelement <2 x double> %256, double 2.000000e-03, i32 0
  %262 = insertelement <2 x double> %257, double 0.000000e+00, i32 0
  %263 = select i1 %259, <2 x double> %257, <2 x double> %262
  %264 = select i1 %259, <2 x double> %256, <2 x double> %261
  %265 = select i1 %259, <2 x double> %255, <2 x double> %260
  %266 = and i32 %10, 2
  %267 = icmp eq i32 %266, 0
  %268 = insertelement <2 x double> %265, double 5.000000e-03, i32 1
  %269 = insertelement <2 x double> %264, double 2.000000e-03, i32 1
  %270 = insertelement <2 x double> %263, double 0.000000e+00, i32 1
  %271 = select i1 %267, <2 x double> %263, <2 x double> %270
  %272 = select i1 %267, <2 x double> %264, <2 x double> %269
  %273 = select i1 %267, <2 x double> %265, <2 x double> %268
  %274 = fmul fast <2 x double> %273, %273
  %275 = fmul fast <2 x double> %272, %272
  %276 = fadd fast <2 x double> %274, %275
  %277 = fmul fast <2 x double> %271, %271
  %278 = fadd fast <2 x double> %276, %277
  %279 = fmul fast <2 x double> %278, <double 1.500000e+00, double 1.500000e+00>
  %280 = fmul fast <2 x double> %227, <double 0x3FD5555555555555, double 0x3FD5555555555555>
  %281 = fsub fast <2 x double> <double 1.000000e+00, double 1.000000e+00>, %279
  %282 = fmul fast <2 x double> %280, %281
  %283 = fmul fast <2 x double> %227, <double 0x3FAC71C71C71C71C, double 0x3FAC71C71C71C71C>
  %284 = fmul fast <2 x double> %275, <double 4.500000e+00, double 4.500000e+00>
  %285 = fadd fast <2 x double> %284, <double 1.000000e+00, double 1.000000e+00>
  %286 = fsub fast <2 x double> %285, %279
  %287 = fmul fast <2 x double> %286, %283
  %288 = fmul fast <2 x double> %274, <double 4.500000e+00, double 4.500000e+00>
  %289 = fadd fast <2 x double> %288, <double 1.000000e+00, double 1.000000e+00>
  %290 = fsub fast <2 x double> %289, %279
  %291 = fmul fast <2 x double> %290, %283
  %292 = fmul fast <2 x double> %277, <double 4.500000e+00, double 4.500000e+00>
  %293 = fadd fast <2 x double> %292, <double 1.000000e+00, double 1.000000e+00>
  %294 = fsub fast <2 x double> %293, %279
  %295 = fmul fast <2 x double> %294, %283
  %296 = fmul fast <2 x double> %227, <double 0x3F9C71C71C71C71C, double 0x3F9C71C71C71C71C>
  %297 = fadd fast <2 x double> %273, %272
  %298 = fmul fast <2 x double> %297, %297
  %299 = fmul fast <2 x double> %298, <double 4.500000e+00, double 4.500000e+00>
  %300 = fadd fast <2 x double> %299, <double 1.000000e+00, double 1.000000e+00>
  %301 = fsub fast <2 x double> %300, %279
  %302 = fmul fast <2 x double> %301, %296
  %303 = fsub fast <2 x double> %272, %273
  %304 = fmul fast <2 x double> %303, %303
  %305 = fmul fast <2 x double> %304, <double 4.500000e+00, double 4.500000e+00>
  %306 = fadd fast <2 x double> %305, <double 1.000000e+00, double 1.000000e+00>
  %307 = fsub fast <2 x double> %306, %279
  %308 = fmul fast <2 x double> %307, %296
  %309 = fadd fast <2 x double> %272, %271
  %310 = fmul fast <2 x double> %309, %309
  %311 = fmul fast <2 x double> %310, <double 4.500000e+00, double 4.500000e+00>
  %312 = fadd fast <2 x double> %311, <double 1.000000e+00, double 1.000000e+00>
  %313 = fsub fast <2 x double> %312, %279
  %314 = fmul fast <2 x double> %313, %296
  %315 = fsub fast <2 x double> %272, %271
  %316 = fmul fast <2 x double> %315, %315
  %317 = fmul fast <2 x double> %316, <double 4.500000e+00, double 4.500000e+00>
  %318 = fadd fast <2 x double> %317, <double 1.000000e+00, double 1.000000e+00>
  %319 = fsub fast <2 x double> %318, %279
  %320 = fmul fast <2 x double> %319, %296
  %321 = fadd fast <2 x double> %273, %271
  %322 = fmul fast <2 x double> %321, %321
  %323 = fmul fast <2 x double> %322, <double 4.500000e+00, double 4.500000e+00>
  %324 = fadd fast <2 x double> %323, <double 1.000000e+00, double 1.000000e+00>
  %325 = fsub fast <2 x double> %324, %279
  %326 = fmul fast <2 x double> %325, %296
  %327 = fsub fast <2 x double> %273, %271
  %328 = fmul fast <2 x double> %327, %327
  %329 = fmul fast <2 x double> %328, <double 4.500000e+00, double 4.500000e+00>
  %330 = fadd fast <2 x double> %329, <double 1.000000e+00, double 1.000000e+00>
  %331 = fsub fast <2 x double> %330, %279
  %332 = fmul fast <2 x double> %331, %296
  %333 = fmul fast <2 x double> %227, <double 0x3FC5555555555555, double 0x3FC5555555555555>
  %334 = fmul fast <2 x double> %272, %333
  %335 = fmul fast <2 x double> %273, %333
  %336 = fmul fast <2 x double> %271, %333
  %337 = fmul fast <2 x double> %227, <double 0x3FB5555555555555, double 0x3FB5555555555555>
  %338 = fmul fast <2 x double> %297, %337
  %339 = fmul fast <2 x double> %303, %337
  %340 = fmul fast <2 x double> %309, %337
  %341 = fmul fast <2 x double> %315, %337
  %342 = fmul fast <2 x double> %321, %337
  %343 = fmul fast <2 x double> %327, %337
  %344 = fadd fast <2 x double> %49, %39
  %345 = fmul fast <2 x double> %344, <double 5.000000e-01, double 5.000000e-01>
  %346 = fadd fast <2 x double> %69, %59
  %347 = fmul fast <2 x double> %346, <double 5.000000e-01, double 5.000000e-01>
  %348 = fadd fast <2 x double> %89, %79
  %349 = fmul fast <2 x double> %348, <double 5.000000e-01, double 5.000000e-01>
  %350 = fadd fast <2 x double> %129, %99
  %351 = fmul fast <2 x double> %350, <double 5.000000e-01, double 5.000000e-01>
  %352 = fadd fast <2 x double> %119, %109
  %353 = fmul fast <2 x double> %352, <double 5.000000e-01, double 5.000000e-01>
  %354 = fadd fast <2 x double> %169, %139
  %355 = fmul fast <2 x double> %354, <double 5.000000e-01, double 5.000000e-01>
  %356 = fadd fast <2 x double> %159, %149
  %357 = fmul fast <2 x double> %356, <double 5.000000e-01, double 5.000000e-01>
  %358 = fadd fast <2 x double> %209, %179
  %359 = fmul fast <2 x double> %358, <double 5.000000e-01, double 5.000000e-01>
  %360 = fadd fast <2 x double> %199, %189
  %361 = fmul fast <2 x double> %360, <double 5.000000e-01, double 5.000000e-01>
  %362 = fmul fast <2 x double> %237, <double 5.000000e-01, double 5.000000e-01>
  %363 = fmul fast <2 x double> %228, <double 5.000000e-01, double 5.000000e-01>
  %364 = fmul fast <2 x double> %246, <double 5.000000e-01, double 5.000000e-01>
  %365 = fsub fast <2 x double> %99, %129
  %366 = fmul fast <2 x double> %365, <double 5.000000e-01, double 5.000000e-01>
  %367 = fsub fast <2 x double> %109, %119
  %368 = fmul fast <2 x double> %367, <double 5.000000e-01, double 5.000000e-01>
  %369 = fsub fast <2 x double> %139, %169
  %370 = fmul fast <2 x double> %369, <double 5.000000e-01, double 5.000000e-01>
  %371 = fsub fast <2 x double> %149, %159
  %372 = fmul fast <2 x double> %371, <double 5.000000e-01, double 5.000000e-01>
  %373 = fsub fast <2 x double> %179, %209
  %374 = fmul fast <2 x double> %373, <double 5.000000e-01, double 5.000000e-01>
  %375 = fsub fast <2 x double> %189, %199
  %376 = fmul fast <2 x double> %375, <double 5.000000e-01, double 5.000000e-01>
  %377 = fsub fast <2 x double> %29, %282
  %378 = fmul fast <2 x double> %377, <double 1.950000e+00, double 1.950000e+00>
  %379 = fsub fast <2 x double> %29, %378
  %380 = fsub fast <2 x double> %345, %287
  %381 = fmul fast <2 x double> %380, <double -1.950000e+00, double -1.950000e+00>
  %382 = fsub fast <2 x double> %362, %334
  %383 = fmul fast <2 x double> %382, <double 0x3FB0ECF56BE69CA7, double 0x3FB0ECF56BE69CA7>
  %384 = fsub fast <2 x double> %39, %383
  %385 = fadd fast <2 x double> %381, %384
  %386 = fsub fast <2 x double> %334, %362
  %387 = fmul fast <2 x double> %386, <double 0x3FB0ECF56BE69CA7, double 0x3FB0ECF56BE69CA7>
  %388 = fsub fast <2 x double> %49, %387
  %389 = fadd fast <2 x double> %381, %388
  %390 = fsub fast <2 x double> %347, %291
  %391 = fmul fast <2 x double> %390, <double -1.950000e+00, double -1.950000e+00>
  %392 = fsub fast <2 x double> %363, %335
  %393 = fmul fast <2 x double> %392, <double 0x3FB0ECF56BE69CA7, double 0x3FB0ECF56BE69CA7>
  %394 = fsub fast <2 x double> %59, %393
  %395 = fadd fast <2 x double> %391, %394
  %396 = fsub fast <2 x double> %335, %363
  %397 = fmul fast <2 x double> %396, <double 0x3FB0ECF56BE69CA7, double 0x3FB0ECF56BE69CA7>
  %398 = fsub fast <2 x double> %69, %397
  %399 = fadd fast <2 x double> %391, %398
  %400 = fsub fast <2 x double> %349, %295
  %401 = fmul fast <2 x double> %400, <double -1.950000e+00, double -1.950000e+00>
  %402 = fsub fast <2 x double> %364, %336
  %403 = fmul fast <2 x double> %402, <double 0x3FB0ECF56BE69CA7, double 0x3FB0ECF56BE69CA7>
  %404 = fsub fast <2 x double> %79, %403
  %405 = fadd fast <2 x double> %401, %404
  %406 = fsub fast <2 x double> %336, %364
  %407 = fmul fast <2 x double> %406, <double 0x3FB0ECF56BE69CA7, double 0x3FB0ECF56BE69CA7>
  %408 = fsub fast <2 x double> %89, %407
  %409 = fadd fast <2 x double> %401, %408
  %410 = fsub fast <2 x double> %351, %302
  %411 = fmul fast <2 x double> %410, <double -1.950000e+00, double -1.950000e+00>
  %412 = fsub fast <2 x double> %366, %338
  %413 = fmul fast <2 x double> %412, <double 0x3FB0ECF56BE69CA7, double 0x3FB0ECF56BE69CA7>
  %414 = fsub fast <2 x double> %99, %413
  %415 = fadd fast <2 x double> %411, %414
  %416 = fsub fast <2 x double> %353, %308
  %417 = fmul fast <2 x double> %416, <double -1.950000e+00, double -1.950000e+00>
  %418 = fsub fast <2 x double> %368, %339
  %419 = fmul fast <2 x double> %418, <double 0x3FB0ECF56BE69CA7, double 0x3FB0ECF56BE69CA7>
  %420 = fsub fast <2 x double> %109, %419
  %421 = fadd fast <2 x double> %417, %420
  %422 = fsub fast <2 x double> %339, %368
  %423 = fmul fast <2 x double> %422, <double 0x3FB0ECF56BE69CA7, double 0x3FB0ECF56BE69CA7>
  %424 = fsub fast <2 x double> %119, %423
  %425 = fadd fast <2 x double> %417, %424
  %426 = fsub fast <2 x double> %338, %366
  %427 = fmul fast <2 x double> %426, <double 0x3FB0ECF56BE69CA7, double 0x3FB0ECF56BE69CA7>
  %428 = fsub fast <2 x double> %129, %427
  %429 = fadd fast <2 x double> %411, %428
  %430 = fsub fast <2 x double> %355, %314
  %431 = fmul fast <2 x double> %430, <double -1.950000e+00, double -1.950000e+00>
  %432 = fsub fast <2 x double> %370, %340
  %433 = fmul fast <2 x double> %432, <double 0x3FB0ECF56BE69CA7, double 0x3FB0ECF56BE69CA7>
  %434 = fsub fast <2 x double> %139, %433
  %435 = fadd fast <2 x double> %431, %434
  %436 = fsub fast <2 x double> %357, %320
  %437 = fmul fast <2 x double> %436, <double -1.950000e+00, double -1.950000e+00>
  %438 = fsub fast <2 x double> %372, %341
  %439 = fmul fast <2 x double> %438, <double 0x3FB0ECF56BE69CA7, double 0x3FB0ECF56BE69CA7>
  %440 = fsub fast <2 x double> %149, %439
  %441 = fadd fast <2 x double> %437, %440
  %442 = fsub fast <2 x double> %341, %372
  %443 = fmul fast <2 x double> %442, <double 0x3FB0ECF56BE69CA7, double 0x3FB0ECF56BE69CA7>
  %444 = fsub fast <2 x double> %159, %443
  %445 = fadd fast <2 x double> %437, %444
  %446 = fsub fast <2 x double> %340, %370
  %447 = fmul fast <2 x double> %446, <double 0x3FB0ECF56BE69CA7, double 0x3FB0ECF56BE69CA7>
  %448 = fsub fast <2 x double> %169, %447
  %449 = fadd fast <2 x double> %431, %448
  %450 = fsub fast <2 x double> %359, %326
  %451 = fmul fast <2 x double> %450, <double -1.950000e+00, double -1.950000e+00>
  %452 = fsub fast <2 x double> %374, %342
  %453 = fmul fast <2 x double> %452, <double 0x3FB0ECF56BE69CA7, double 0x3FB0ECF56BE69CA7>
  %454 = fsub fast <2 x double> %179, %453
  %455 = fadd fast <2 x double> %451, %454
  %456 = fsub fast <2 x double> %361, %332
  %457 = fmul fast <2 x double> %456, <double -1.950000e+00, double -1.950000e+00>
  %458 = fsub fast <2 x double> %376, %343
  %459 = fmul fast <2 x double> %458, <double 0x3FB0ECF56BE69CA7, double 0x3FB0ECF56BE69CA7>
  %460 = fsub fast <2 x double> %189, %459
  %461 = fadd fast <2 x double> %457, %460
  %462 = fsub fast <2 x double> %343, %376
  %463 = fmul fast <2 x double> %462, <double 0x3FB0ECF56BE69CA7, double 0x3FB0ECF56BE69CA7>
  %464 = fsub fast <2 x double> %199, %463
  %465 = fadd fast <2 x double> %457, %464
  %466 = fsub fast <2 x double> %342, %374
  %467 = fmul fast <2 x double> %466, <double 0x3FB0ECF56BE69CA7, double 0x3FB0ECF56BE69CA7>
  %468 = fsub fast <2 x double> %209, %467
  %469 = fadd fast <2 x double> %451, %468
  %470 = extractelement <2 x double> %379, i32 0
  %471 = getelementptr inbounds double, double* %1, i64 %25
  store double %470, double* %471, align 8, !tbaa !6
  %472 = extractelement <2 x double> %379, i32 1
  %473 = getelementptr inbounds double, double* %1, i64 %22
  store double %472, double* %473, align 8, !tbaa !6
  %474 = extractelement <2 x double> %385, i32 0
  %475 = add nsw i32 %4, 2001
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds double, double* %1, i64 %476
  store double %474, double* %477, align 8, !tbaa !6
  %478 = extractelement <2 x double> %385, i32 1
  %479 = add nsw i32 %4, 2021
  %480 = sext i32 %479 to i64
  %481 = getelementptr inbounds double, double* %1, i64 %480
  store double %478, double* %481, align 8, !tbaa !6
  %482 = extractelement <2 x double> %389, i32 0
  %483 = add nsw i32 %4, -1998
  %484 = sext i32 %483 to i64
  %485 = getelementptr inbounds double, double* %1, i64 %484
  store double %482, double* %485, align 8, !tbaa !6
  %486 = extractelement <2 x double> %389, i32 1
  %487 = add nsw i32 %4, -1978
  %488 = sext i32 %487 to i64
  %489 = getelementptr inbounds double, double* %1, i64 %488
  store double %486, double* %489, align 8, !tbaa !6
  %490 = extractelement <2 x double> %395, i32 0
  %491 = getelementptr inbounds double, double* %1, i64 %51
  store double %490, double* %491, align 8, !tbaa !6
  %492 = extractelement <2 x double> %395, i32 1
  %493 = add nsw i32 %4, 43
  %494 = sext i32 %493 to i64
  %495 = getelementptr inbounds double, double* %1, i64 %494
  store double %492, double* %495, align 8, !tbaa !6
  %496 = extractelement <2 x double> %399, i32 0
  %497 = add nsw i32 %4, -16
  %498 = sext i32 %497 to i64
  %499 = getelementptr inbounds double, double* %1, i64 %498
  store double %496, double* %499, align 8, !tbaa !6
  %500 = extractelement <2 x double> %399, i32 1
  %501 = getelementptr inbounds double, double* %1, i64 %65
  store double %500, double* %501, align 8, !tbaa !6
  %502 = extractelement <2 x double> %405, i32 0
  %503 = add nsw i32 %4, 200005
  %504 = sext i32 %503 to i64
  %505 = getelementptr inbounds double, double* %1, i64 %504
  store double %502, double* %505, align 8, !tbaa !6
  %506 = extractelement <2 x double> %405, i32 1
  %507 = add nsw i32 %4, 200025
  %508 = sext i32 %507 to i64
  %509 = getelementptr inbounds double, double* %1, i64 %508
  store double %506, double* %509, align 8, !tbaa !6
  %510 = extractelement <2 x double> %409, i32 0
  %511 = add nsw i32 %4, -199994
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds double, double* %1, i64 %512
  store double %510, double* %513, align 8, !tbaa !6
  %514 = extractelement <2 x double> %409, i32 1
  %515 = add nsw i32 %4, -199974
  %516 = sext i32 %515 to i64
  %517 = getelementptr inbounds double, double* %1, i64 %516
  store double %514, double* %517, align 8, !tbaa !6
  %518 = extractelement <2 x double> %415, i32 0
  %519 = add nsw i32 %4, 2027
  %520 = sext i32 %519 to i64
  %521 = getelementptr inbounds double, double* %1, i64 %520
  store double %518, double* %521, align 8, !tbaa !6
  %522 = extractelement <2 x double> %415, i32 1
  %523 = add nsw i32 %4, 2047
  %524 = sext i32 %523 to i64
  %525 = getelementptr inbounds double, double* %1, i64 %524
  store double %522, double* %525, align 8, !tbaa !6
  %526 = extractelement <2 x double> %421, i32 0
  %527 = add nsw i32 %4, 1988
  %528 = sext i32 %527 to i64
  %529 = getelementptr inbounds double, double* %1, i64 %528
  store double %526, double* %529, align 8, !tbaa !6
  %530 = extractelement <2 x double> %421, i32 1
  %531 = add nsw i32 %4, 2008
  %532 = sext i32 %531 to i64
  %533 = getelementptr inbounds double, double* %1, i64 %532
  store double %530, double* %533, align 8, !tbaa !6
  %534 = extractelement <2 x double> %425, i32 0
  %535 = add nsw i32 %4, -1971
  %536 = sext i32 %535 to i64
  %537 = getelementptr inbounds double, double* %1, i64 %536
  store double %534, double* %537, align 8, !tbaa !6
  %538 = extractelement <2 x double> %425, i32 1
  %539 = add nsw i32 %4, -1951
  %540 = sext i32 %539 to i64
  %541 = getelementptr inbounds double, double* %1, i64 %540
  store double %538, double* %541, align 8, !tbaa !6
  %542 = extractelement <2 x double> %429, i32 0
  %543 = add nsw i32 %4, -2010
  %544 = sext i32 %543 to i64
  %545 = getelementptr inbounds double, double* %1, i64 %544
  store double %542, double* %545, align 8, !tbaa !6
  %546 = extractelement <2 x double> %429, i32 1
  %547 = add nsw i32 %4, -1990
  %548 = sext i32 %547 to i64
  %549 = getelementptr inbounds double, double* %1, i64 %548
  store double %546, double* %549, align 8, !tbaa !6
  %550 = extractelement <2 x double> %435, i32 0
  %551 = add nsw i32 %4, 202011
  %552 = sext i32 %551 to i64
  %553 = getelementptr inbounds double, double* %1, i64 %552
  store double %550, double* %553, align 8, !tbaa !6
  %554 = extractelement <2 x double> %435, i32 1
  %555 = add nsw i32 %4, 202031
  %556 = sext i32 %555 to i64
  %557 = getelementptr inbounds double, double* %1, i64 %556
  store double %554, double* %557, align 8, !tbaa !6
  %558 = extractelement <2 x double> %441, i32 0
  %559 = add nsw i32 %4, -197988
  %560 = sext i32 %559 to i64
  %561 = getelementptr inbounds double, double* %1, i64 %560
  store double %558, double* %561, align 8, !tbaa !6
  %562 = extractelement <2 x double> %441, i32 1
  %563 = add nsw i32 %4, -197968
  %564 = sext i32 %563 to i64
  %565 = getelementptr inbounds double, double* %1, i64 %564
  store double %562, double* %565, align 8, !tbaa !6
  %566 = extractelement <2 x double> %445, i32 0
  %567 = add nsw i32 %4, 198013
  %568 = sext i32 %567 to i64
  %569 = getelementptr inbounds double, double* %1, i64 %568
  store double %566, double* %569, align 8, !tbaa !6
  %570 = extractelement <2 x double> %445, i32 1
  %571 = add nsw i32 %4, 198033
  %572 = sext i32 %571 to i64
  %573 = getelementptr inbounds double, double* %1, i64 %572
  store double %570, double* %573, align 8, !tbaa !6
  %574 = extractelement <2 x double> %449, i32 0
  %575 = add nsw i32 %4, -201986
  %576 = sext i32 %575 to i64
  %577 = getelementptr inbounds double, double* %1, i64 %576
  store double %574, double* %577, align 8, !tbaa !6
  %578 = extractelement <2 x double> %449, i32 1
  %579 = add nsw i32 %4, -201966
  %580 = sext i32 %579 to i64
  %581 = getelementptr inbounds double, double* %1, i64 %580
  store double %578, double* %581, align 8, !tbaa !6
  %582 = extractelement <2 x double> %455, i32 0
  %583 = add nsw i32 %4, 200035
  %584 = sext i32 %583 to i64
  %585 = getelementptr inbounds double, double* %1, i64 %584
  store double %582, double* %585, align 8, !tbaa !6
  %586 = extractelement <2 x double> %455, i32 1
  %587 = add nsw i32 %4, 200055
  %588 = sext i32 %587 to i64
  %589 = getelementptr inbounds double, double* %1, i64 %588
  store double %586, double* %589, align 8, !tbaa !6
  %590 = extractelement <2 x double> %461, i32 0
  %591 = add nsw i32 %4, -199964
  %592 = sext i32 %591 to i64
  %593 = getelementptr inbounds double, double* %1, i64 %592
  store double %590, double* %593, align 8, !tbaa !6
  %594 = extractelement <2 x double> %461, i32 1
  %595 = add nsw i32 %4, -199944
  %596 = sext i32 %595 to i64
  %597 = getelementptr inbounds double, double* %1, i64 %596
  store double %594, double* %597, align 8, !tbaa !6
  %598 = extractelement <2 x double> %465, i32 0
  %599 = add nsw i32 %4, 199997
  %600 = sext i32 %599 to i64
  %601 = getelementptr inbounds double, double* %1, i64 %600
  store double %598, double* %601, align 8, !tbaa !6
  %602 = extractelement <2 x double> %465, i32 1
  %603 = add nsw i32 %4, 200017
  %604 = sext i32 %603 to i64
  %605 = getelementptr inbounds double, double* %1, i64 %604
  store double %602, double* %605, align 8, !tbaa !6
  %606 = extractelement <2 x double> %469, i32 0
  %607 = add nsw i32 %4, -200002
  %608 = sext i32 %607 to i64
  %609 = getelementptr inbounds double, double* %1, i64 %608
  store double %606, double* %609, align 8, !tbaa !6
  %610 = extractelement <2 x double> %469, i32 1
  %611 = add nsw i32 %4, -199982
  %612 = sext i32 %611 to i64
  %613 = getelementptr inbounds double, double* %1, i64 %612
  store double %610, double* %613, align 8, !tbaa !6
  %614 = add nsw i32 %4, 40
  br label %615

615:                                              ; preds = %21, %619
  %616 = phi i32 [ %620, %619 ], [ %614, %21 ]
  %617 = icmp slt i32 %616, 26000000
  br i1 %617, label %3, label %1165, !llvm.loop !22

618:                                              ; preds = %13, %3
  br label %621

619:                                              ; preds = %1164
  %620 = add nsw i32 %625, 20
  br label %615

621:                                              ; preds = %618, %1164
  %622 = phi i1 [ true, %618 ], [ false, %1164 ]
  %623 = phi i32 [ 0, %618 ], [ 20, %1164 ]
  %624 = phi i32 [ %4, %618 ], [ %625, %1164 ]
  %625 = add nsw i32 %623, %624
  %626 = add nsw i32 %625, 19
  %627 = sext i32 %626 to i64
  %628 = getelementptr inbounds double, double* %0, i64 %627
  %629 = bitcast double* %628 to i32*
  %630 = load i32, i32* %629, align 4, !tbaa !8
  %631 = and i32 %630, 1
  %632 = icmp eq i32 %631, 0
  br i1 %632, label %764, label %633

633:                                              ; preds = %621
  %634 = sext i32 %625 to i64
  %635 = getelementptr inbounds double, double* %0, i64 %634
  %636 = load double, double* %635, align 8, !tbaa !6
  %637 = getelementptr inbounds double, double* %1, i64 %634
  store double %636, double* %637, align 8, !tbaa !6
  %638 = add nsw i32 %625, 1
  %639 = sext i32 %638 to i64
  %640 = getelementptr inbounds double, double* %0, i64 %639
  %641 = load double, double* %640, align 8, !tbaa !6
  %642 = add nsw i32 %625, -1998
  %643 = sext i32 %642 to i64
  %644 = getelementptr inbounds double, double* %1, i64 %643
  store double %641, double* %644, align 8, !tbaa !6
  %645 = add nsw i32 %625, 2
  %646 = sext i32 %645 to i64
  %647 = getelementptr inbounds double, double* %0, i64 %646
  %648 = load double, double* %647, align 8, !tbaa !6
  %649 = add nsw i32 %625, 2001
  %650 = sext i32 %649 to i64
  %651 = getelementptr inbounds double, double* %1, i64 %650
  store double %648, double* %651, align 8, !tbaa !6
  %652 = add nsw i32 %625, 3
  %653 = sext i32 %652 to i64
  %654 = getelementptr inbounds double, double* %0, i64 %653
  %655 = load double, double* %654, align 8, !tbaa !6
  %656 = add nsw i32 %625, -16
  %657 = sext i32 %656 to i64
  %658 = getelementptr inbounds double, double* %1, i64 %657
  store double %655, double* %658, align 8, !tbaa !6
  %659 = add nsw i32 %625, 4
  %660 = sext i32 %659 to i64
  %661 = getelementptr inbounds double, double* %0, i64 %660
  %662 = load double, double* %661, align 8, !tbaa !6
  %663 = add nsw i32 %625, 23
  %664 = sext i32 %663 to i64
  %665 = getelementptr inbounds double, double* %1, i64 %664
  store double %662, double* %665, align 8, !tbaa !6
  %666 = add nsw i32 %625, 5
  %667 = sext i32 %666 to i64
  %668 = getelementptr inbounds double, double* %0, i64 %667
  %669 = load double, double* %668, align 8, !tbaa !6
  %670 = add nsw i32 %625, -199994
  %671 = sext i32 %670 to i64
  %672 = getelementptr inbounds double, double* %1, i64 %671
  store double %669, double* %672, align 8, !tbaa !6
  %673 = add nsw i32 %625, 6
  %674 = sext i32 %673 to i64
  %675 = getelementptr inbounds double, double* %0, i64 %674
  %676 = load double, double* %675, align 8, !tbaa !6
  %677 = add nsw i32 %625, 200005
  %678 = sext i32 %677 to i64
  %679 = getelementptr inbounds double, double* %1, i64 %678
  store double %676, double* %679, align 8, !tbaa !6
  %680 = add nsw i32 %625, 7
  %681 = sext i32 %680 to i64
  %682 = getelementptr inbounds double, double* %0, i64 %681
  %683 = load double, double* %682, align 8, !tbaa !6
  %684 = add nsw i32 %625, -2010
  %685 = sext i32 %684 to i64
  %686 = getelementptr inbounds double, double* %1, i64 %685
  store double %683, double* %686, align 8, !tbaa !6
  %687 = add nsw i32 %625, 8
  %688 = sext i32 %687 to i64
  %689 = getelementptr inbounds double, double* %0, i64 %688
  %690 = load double, double* %689, align 8, !tbaa !6
  %691 = add nsw i32 %625, -1971
  %692 = sext i32 %691 to i64
  %693 = getelementptr inbounds double, double* %1, i64 %692
  store double %690, double* %693, align 8, !tbaa !6
  %694 = add nsw i32 %625, 9
  %695 = sext i32 %694 to i64
  %696 = getelementptr inbounds double, double* %0, i64 %695
  %697 = load double, double* %696, align 8, !tbaa !6
  %698 = add nsw i32 %625, 1988
  %699 = sext i32 %698 to i64
  %700 = getelementptr inbounds double, double* %1, i64 %699
  store double %697, double* %700, align 8, !tbaa !6
  %701 = add nsw i32 %625, 10
  %702 = sext i32 %701 to i64
  %703 = getelementptr inbounds double, double* %0, i64 %702
  %704 = load double, double* %703, align 8, !tbaa !6
  %705 = add nsw i32 %625, 2027
  %706 = sext i32 %705 to i64
  %707 = getelementptr inbounds double, double* %1, i64 %706
  store double %704, double* %707, align 8, !tbaa !6
  %708 = add nsw i32 %625, 11
  %709 = sext i32 %708 to i64
  %710 = getelementptr inbounds double, double* %0, i64 %709
  %711 = load double, double* %710, align 8, !tbaa !6
  %712 = add nsw i32 %625, -201986
  %713 = sext i32 %712 to i64
  %714 = getelementptr inbounds double, double* %1, i64 %713
  store double %711, double* %714, align 8, !tbaa !6
  %715 = add nsw i32 %625, 12
  %716 = sext i32 %715 to i64
  %717 = getelementptr inbounds double, double* %0, i64 %716
  %718 = load double, double* %717, align 8, !tbaa !6
  %719 = add nsw i32 %625, 198013
  %720 = sext i32 %719 to i64
  %721 = getelementptr inbounds double, double* %1, i64 %720
  store double %718, double* %721, align 8, !tbaa !6
  %722 = add nsw i32 %625, 13
  %723 = sext i32 %722 to i64
  %724 = getelementptr inbounds double, double* %0, i64 %723
  %725 = load double, double* %724, align 8, !tbaa !6
  %726 = add nsw i32 %625, -197988
  %727 = sext i32 %726 to i64
  %728 = getelementptr inbounds double, double* %1, i64 %727
  store double %725, double* %728, align 8, !tbaa !6
  %729 = add nsw i32 %625, 14
  %730 = sext i32 %729 to i64
  %731 = getelementptr inbounds double, double* %0, i64 %730
  %732 = load double, double* %731, align 8, !tbaa !6
  %733 = add nsw i32 %625, 202011
  %734 = sext i32 %733 to i64
  %735 = getelementptr inbounds double, double* %1, i64 %734
  store double %732, double* %735, align 8, !tbaa !6
  %736 = add nsw i32 %625, 15
  %737 = sext i32 %736 to i64
  %738 = getelementptr inbounds double, double* %0, i64 %737
  %739 = load double, double* %738, align 8, !tbaa !6
  %740 = add nsw i32 %625, -200002
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds double, double* %1, i64 %741
  store double %739, double* %742, align 8, !tbaa !6
  %743 = add nsw i32 %625, 16
  %744 = sext i32 %743 to i64
  %745 = getelementptr inbounds double, double* %0, i64 %744
  %746 = load double, double* %745, align 8, !tbaa !6
  %747 = add nsw i32 %625, 199997
  %748 = sext i32 %747 to i64
  %749 = getelementptr inbounds double, double* %1, i64 %748
  store double %746, double* %749, align 8, !tbaa !6
  %750 = add nsw i32 %625, 17
  %751 = sext i32 %750 to i64
  %752 = getelementptr inbounds double, double* %0, i64 %751
  %753 = load double, double* %752, align 8, !tbaa !6
  %754 = add nsw i32 %625, -199964
  %755 = sext i32 %754 to i64
  %756 = getelementptr inbounds double, double* %1, i64 %755
  store double %753, double* %756, align 8, !tbaa !6
  %757 = add nsw i32 %625, 18
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds double, double* %0, i64 %758
  %760 = load double, double* %759, align 8, !tbaa !6
  %761 = add nsw i32 %625, 200035
  %762 = sext i32 %761 to i64
  %763 = getelementptr inbounds double, double* %1, i64 %762
  store double %760, double* %763, align 8, !tbaa !6
  br label %1164

764:                                              ; preds = %621
  %765 = sext i32 %625 to i64
  %766 = getelementptr inbounds double, double* %0, i64 %765
  %767 = load double, double* %766, align 8, !tbaa !6
  %768 = add nsw i32 %625, 1
  %769 = sext i32 %768 to i64
  %770 = getelementptr inbounds double, double* %0, i64 %769
  %771 = load double, double* %770, align 8, !tbaa !6
  %772 = fadd fast double %771, %767
  %773 = add nsw i32 %625, 2
  %774 = sext i32 %773 to i64
  %775 = getelementptr inbounds double, double* %0, i64 %774
  %776 = load double, double* %775, align 8, !tbaa !6
  %777 = fadd fast double %772, %776
  %778 = add nsw i32 %625, 3
  %779 = sext i32 %778 to i64
  %780 = getelementptr inbounds double, double* %0, i64 %779
  %781 = load double, double* %780, align 8, !tbaa !6
  %782 = fadd fast double %777, %781
  %783 = add nsw i32 %625, 4
  %784 = sext i32 %783 to i64
  %785 = getelementptr inbounds double, double* %0, i64 %784
  %786 = load double, double* %785, align 8, !tbaa !6
  %787 = fadd fast double %782, %786
  %788 = add nsw i32 %625, 5
  %789 = sext i32 %788 to i64
  %790 = getelementptr inbounds double, double* %0, i64 %789
  %791 = load double, double* %790, align 8, !tbaa !6
  %792 = fadd fast double %787, %791
  %793 = add nsw i32 %625, 6
  %794 = sext i32 %793 to i64
  %795 = getelementptr inbounds double, double* %0, i64 %794
  %796 = load double, double* %795, align 8, !tbaa !6
  %797 = fadd fast double %792, %796
  %798 = add nsw i32 %625, 7
  %799 = sext i32 %798 to i64
  %800 = getelementptr inbounds double, double* %0, i64 %799
  %801 = load double, double* %800, align 8, !tbaa !6
  %802 = fadd fast double %797, %801
  %803 = add nsw i32 %625, 8
  %804 = sext i32 %803 to i64
  %805 = getelementptr inbounds double, double* %0, i64 %804
  %806 = load double, double* %805, align 8, !tbaa !6
  %807 = fadd fast double %802, %806
  %808 = add nsw i32 %625, 9
  %809 = sext i32 %808 to i64
  %810 = getelementptr inbounds double, double* %0, i64 %809
  %811 = load double, double* %810, align 8, !tbaa !6
  %812 = fadd fast double %807, %811
  %813 = add nsw i32 %625, 10
  %814 = sext i32 %813 to i64
  %815 = getelementptr inbounds double, double* %0, i64 %814
  %816 = load double, double* %815, align 8, !tbaa !6
  %817 = fadd fast double %812, %816
  %818 = add nsw i32 %625, 11
  %819 = sext i32 %818 to i64
  %820 = getelementptr inbounds double, double* %0, i64 %819
  %821 = load double, double* %820, align 8, !tbaa !6
  %822 = fadd fast double %817, %821
  %823 = add nsw i32 %625, 12
  %824 = sext i32 %823 to i64
  %825 = getelementptr inbounds double, double* %0, i64 %824
  %826 = load double, double* %825, align 8, !tbaa !6
  %827 = fadd fast double %822, %826
  %828 = add nsw i32 %625, 13
  %829 = sext i32 %828 to i64
  %830 = getelementptr inbounds double, double* %0, i64 %829
  %831 = load double, double* %830, align 8, !tbaa !6
  %832 = fadd fast double %827, %831
  %833 = add nsw i32 %625, 14
  %834 = sext i32 %833 to i64
  %835 = getelementptr inbounds double, double* %0, i64 %834
  %836 = load double, double* %835, align 8, !tbaa !6
  %837 = fadd fast double %832, %836
  %838 = add nsw i32 %625, 15
  %839 = sext i32 %838 to i64
  %840 = getelementptr inbounds double, double* %0, i64 %839
  %841 = load double, double* %840, align 8, !tbaa !6
  %842 = fadd fast double %837, %841
  %843 = add nsw i32 %625, 16
  %844 = sext i32 %843 to i64
  %845 = getelementptr inbounds double, double* %0, i64 %844
  %846 = load double, double* %845, align 8, !tbaa !6
  %847 = fadd fast double %842, %846
  %848 = add nsw i32 %625, 17
  %849 = sext i32 %848 to i64
  %850 = getelementptr inbounds double, double* %0, i64 %849
  %851 = load double, double* %850, align 8, !tbaa !6
  %852 = fadd fast double %847, %851
  %853 = add nsw i32 %625, 18
  %854 = sext i32 %853 to i64
  %855 = getelementptr inbounds double, double* %0, i64 %854
  %856 = load double, double* %855, align 8, !tbaa !6
  %857 = fadd fast double %852, %856
  %858 = fadd fast double %781, %801
  %859 = fadd fast double %786, %806
  %860 = fadd fast double %858, %811
  %861 = fadd fast double %859, %816
  %862 = fsub fast double %860, %861
  %863 = fadd fast double %862, %841
  %864 = fadd fast double %863, %846
  %865 = fadd fast double %851, %856
  %866 = fsub fast double %864, %865
  %867 = fsub fast double %771, %776
  %868 = fadd fast double %801, %867
  %869 = fadd fast double %868, %806
  %870 = fadd fast double %811, %816
  %871 = fsub fast double %869, %870
  %872 = fadd fast double %871, %821
  %873 = fadd fast double %872, %826
  %874 = fadd fast double %831, %836
  %875 = fsub fast double %873, %874
  %876 = fadd fast double %791, %821
  %877 = fadd fast double %796, %826
  %878 = fadd fast double %876, %831
  %879 = fadd fast double %877, %836
  %880 = fadd fast double %878, %841
  %881 = fadd fast double %879, %846
  %882 = fadd fast double %880, %851
  %883 = fadd fast double %881, %856
  %884 = fsub fast double %882, %883
  %885 = fdiv fast double %866, %857
  %886 = fdiv fast double %875, %857
  %887 = fdiv fast double %884, %857
  %888 = and i32 %630, 2
  %889 = icmp eq i32 %888, 0
  %890 = select i1 %889, double %887, double 0.000000e+00
  %891 = select i1 %889, double %886, double 2.000000e-03
  %892 = select i1 %889, double %885, double 5.000000e-03
  %893 = fmul fast double %892, %892
  %894 = fmul fast double %891, %891
  %895 = fadd fast double %893, %894
  %896 = fmul fast double %890, %890
  %897 = fadd fast double %895, %896
  %898 = fmul fast double %897, 1.500000e+00
  %899 = fmul fast double %857, 0x3FD5555555555555
  %900 = fsub fast double 1.000000e+00, %898
  %901 = fmul fast double %899, %900
  %902 = fmul fast double %857, 0x3FAC71C71C71C71C
  %903 = fmul fast double %894, 4.500000e+00
  %904 = fadd fast double %903, 1.000000e+00
  %905 = fsub fast double %904, %898
  %906 = fmul fast double %905, %902
  %907 = fmul fast double %893, 4.500000e+00
  %908 = fadd fast double %907, 1.000000e+00
  %909 = fsub fast double %908, %898
  %910 = fmul fast double %909, %902
  %911 = fmul fast double %896, 4.500000e+00
  %912 = fadd fast double %911, 1.000000e+00
  %913 = fsub fast double %912, %898
  %914 = fmul fast double %913, %902
  %915 = fmul fast double %857, 0x3F9C71C71C71C71C
  %916 = fadd fast double %892, %891
  %917 = fmul fast double %916, %916
  %918 = fmul fast double %917, 4.500000e+00
  %919 = fadd fast double %918, 1.000000e+00
  %920 = fsub fast double %919, %898
  %921 = fmul fast double %920, %915
  %922 = fsub fast double %891, %892
  %923 = fmul fast double %922, %922
  %924 = fmul fast double %923, 4.500000e+00
  %925 = fadd fast double %924, 1.000000e+00
  %926 = fsub fast double %925, %898
  %927 = fmul fast double %926, %915
  %928 = fadd fast double %891, %890
  %929 = fmul fast double %928, %928
  %930 = fmul fast double %929, 4.500000e+00
  %931 = fadd fast double %930, 1.000000e+00
  %932 = fsub fast double %931, %898
  %933 = fmul fast double %932, %915
  %934 = fsub fast double %891, %890
  %935 = fmul fast double %934, %934
  %936 = fmul fast double %935, 4.500000e+00
  %937 = fadd fast double %936, 1.000000e+00
  %938 = fsub fast double %937, %898
  %939 = fmul fast double %938, %915
  %940 = fadd fast double %892, %890
  %941 = fmul fast double %940, %940
  %942 = fmul fast double %941, 4.500000e+00
  %943 = fadd fast double %942, 1.000000e+00
  %944 = fsub fast double %943, %898
  %945 = fmul fast double %944, %915
  %946 = fsub fast double %892, %890
  %947 = fmul fast double %946, %946
  %948 = fmul fast double %947, 4.500000e+00
  %949 = fadd fast double %948, 1.000000e+00
  %950 = fsub fast double %949, %898
  %951 = fmul fast double %950, %915
  %952 = fmul fast double %857, 0x3FC5555555555555
  %953 = fmul fast double %891, %952
  %954 = fmul fast double %892, %952
  %955 = fmul fast double %890, %952
  %956 = fmul fast double %857, 0x3FB5555555555555
  %957 = fmul fast double %916, %956
  %958 = fmul fast double %922, %956
  %959 = fmul fast double %928, %956
  %960 = fmul fast double %934, %956
  %961 = fmul fast double %940, %956
  %962 = fmul fast double %946, %956
  %963 = fadd fast double %776, %771
  %964 = fmul fast double %963, 5.000000e-01
  %965 = fadd fast double %786, %781
  %966 = fmul fast double %965, 5.000000e-01
  %967 = fadd fast double %796, %791
  %968 = fmul fast double %967, 5.000000e-01
  %969 = fadd fast double %816, %801
  %970 = fmul fast double %969, 5.000000e-01
  %971 = fadd fast double %811, %806
  %972 = fmul fast double %971, 5.000000e-01
  %973 = fadd fast double %836, %821
  %974 = fmul fast double %973, 5.000000e-01
  %975 = fadd fast double %831, %826
  %976 = fmul fast double %975, 5.000000e-01
  %977 = fadd fast double %856, %841
  %978 = fmul fast double %977, 5.000000e-01
  %979 = fadd fast double %851, %846
  %980 = fmul fast double %979, 5.000000e-01
  %981 = fmul fast double %867, 5.000000e-01
  %982 = fsub fast double %781, %786
  %983 = fmul fast double %982, 5.000000e-01
  %984 = fsub fast double %791, %796
  %985 = fmul fast double %984, 5.000000e-01
  %986 = fsub fast double %801, %816
  %987 = fmul fast double %986, 5.000000e-01
  %988 = fsub fast double %806, %811
  %989 = fmul fast double %988, 5.000000e-01
  %990 = fsub fast double %821, %836
  %991 = fmul fast double %990, 5.000000e-01
  %992 = fsub fast double %826, %831
  %993 = fmul fast double %992, 5.000000e-01
  %994 = fsub fast double %841, %856
  %995 = fmul fast double %994, 5.000000e-01
  %996 = fsub fast double %846, %851
  %997 = fmul fast double %996, 5.000000e-01
  %998 = fsub fast double %767, %901
  %999 = fmul fast double %998, 1.950000e+00
  %1000 = fsub fast double %767, %999
  %1001 = getelementptr inbounds double, double* %1, i64 %765
  store double %1000, double* %1001, align 8, !tbaa !6
  %1002 = load double, double* %770, align 8, !tbaa !6
  %1003 = fsub fast double %964, %906
  %1004 = fmul fast double %1003, -1.950000e+00
  %1005 = fsub fast double %981, %953
  %1006 = fmul fast double %1005, 0xBFB0ECF56BE69CA7
  %1007 = fadd fast double %1006, %1002
  %1008 = fadd fast double %1007, %1004
  %1009 = add nsw i32 %625, 2001
  %1010 = sext i32 %1009 to i64
  %1011 = getelementptr inbounds double, double* %1, i64 %1010
  store double %1008, double* %1011, align 8, !tbaa !6
  %1012 = load double, double* %775, align 8, !tbaa !6
  %1013 = fsub fast double %953, %981
  %1014 = fmul fast double %1013, 0xBFB0ECF56BE69CA7
  %1015 = fadd fast double %1014, %1012
  %1016 = fadd fast double %1015, %1004
  %1017 = add nsw i32 %625, -1998
  %1018 = sext i32 %1017 to i64
  %1019 = getelementptr inbounds double, double* %1, i64 %1018
  store double %1016, double* %1019, align 8, !tbaa !6
  %1020 = load double, double* %780, align 8, !tbaa !6
  %1021 = fsub fast double %966, %910
  %1022 = fmul fast double %1021, -1.950000e+00
  %1023 = fsub fast double %983, %954
  %1024 = fmul fast double %1023, 0xBFB0ECF56BE69CA7
  %1025 = fadd fast double %1020, %1024
  %1026 = fadd fast double %1025, %1022
  %1027 = add nsw i32 %625, 23
  %1028 = sext i32 %1027 to i64
  %1029 = getelementptr inbounds double, double* %1, i64 %1028
  store double %1026, double* %1029, align 8, !tbaa !6
  %1030 = load double, double* %785, align 8, !tbaa !6
  %1031 = fsub fast double %954, %983
  %1032 = fmul fast double %1031, 0xBFB0ECF56BE69CA7
  %1033 = fadd fast double %1030, %1032
  %1034 = fadd fast double %1033, %1022
  %1035 = add nsw i32 %625, -16
  %1036 = sext i32 %1035 to i64
  %1037 = getelementptr inbounds double, double* %1, i64 %1036
  store double %1034, double* %1037, align 8, !tbaa !6
  %1038 = load double, double* %790, align 8, !tbaa !6
  %1039 = fsub fast double %968, %914
  %1040 = fmul fast double %1039, -1.950000e+00
  %1041 = fsub fast double %985, %955
  %1042 = fmul fast double %1041, 0xBFB0ECF56BE69CA7
  %1043 = fadd fast double %1038, %1042
  %1044 = fadd fast double %1043, %1040
  %1045 = add nsw i32 %625, 200005
  %1046 = sext i32 %1045 to i64
  %1047 = getelementptr inbounds double, double* %1, i64 %1046
  store double %1044, double* %1047, align 8, !tbaa !6
  %1048 = load double, double* %795, align 8, !tbaa !6
  %1049 = fsub fast double %955, %985
  %1050 = fmul fast double %1049, 0xBFB0ECF56BE69CA7
  %1051 = fadd fast double %1040, %1050
  %1052 = fadd fast double %1051, %1048
  %1053 = add nsw i32 %625, -199994
  %1054 = sext i32 %1053 to i64
  %1055 = getelementptr inbounds double, double* %1, i64 %1054
  store double %1052, double* %1055, align 8, !tbaa !6
  %1056 = load double, double* %800, align 8, !tbaa !6
  %1057 = fsub fast double %970, %921
  %1058 = fmul fast double %1057, -1.950000e+00
  %1059 = fsub fast double %987, %957
  %1060 = fmul fast double %1059, 0xBFB0ECF56BE69CA7
  %1061 = fadd fast double %1058, %1060
  %1062 = fadd fast double %1061, %1056
  %1063 = add nsw i32 %625, 2027
  %1064 = sext i32 %1063 to i64
  %1065 = getelementptr inbounds double, double* %1, i64 %1064
  store double %1062, double* %1065, align 8, !tbaa !6
  %1066 = load double, double* %805, align 8, !tbaa !6
  %1067 = fsub fast double %972, %927
  %1068 = fmul fast double %1067, -1.950000e+00
  %1069 = fsub fast double %989, %958
  %1070 = fmul fast double %1069, 0xBFB0ECF56BE69CA7
  %1071 = fadd fast double %1068, %1070
  %1072 = fadd fast double %1071, %1066
  %1073 = add nsw i32 %625, 1988
  %1074 = sext i32 %1073 to i64
  %1075 = getelementptr inbounds double, double* %1, i64 %1074
  store double %1072, double* %1075, align 8, !tbaa !6
  %1076 = load double, double* %810, align 8, !tbaa !6
  %1077 = fsub fast double %958, %989
  %1078 = fmul fast double %1077, 0xBFB0ECF56BE69CA7
  %1079 = fadd fast double %1068, %1078
  %1080 = fadd fast double %1079, %1076
  %1081 = add nsw i32 %625, -1971
  %1082 = sext i32 %1081 to i64
  %1083 = getelementptr inbounds double, double* %1, i64 %1082
  store double %1080, double* %1083, align 8, !tbaa !6
  %1084 = load double, double* %815, align 8, !tbaa !6
  %1085 = fsub fast double %957, %987
  %1086 = fmul fast double %1085, 0xBFB0ECF56BE69CA7
  %1087 = fadd fast double %1058, %1086
  %1088 = fadd fast double %1087, %1084
  %1089 = add nsw i32 %625, -2010
  %1090 = sext i32 %1089 to i64
  %1091 = getelementptr inbounds double, double* %1, i64 %1090
  store double %1088, double* %1091, align 8, !tbaa !6
  %1092 = load double, double* %820, align 8, !tbaa !6
  %1093 = fsub fast double %974, %933
  %1094 = fmul fast double %1093, -1.950000e+00
  %1095 = fsub fast double %991, %959
  %1096 = fmul fast double %1095, 0xBFB0ECF56BE69CA7
  %1097 = fadd fast double %1094, %1096
  %1098 = fadd fast double %1097, %1092
  %1099 = add nsw i32 %625, 202011
  %1100 = sext i32 %1099 to i64
  %1101 = getelementptr inbounds double, double* %1, i64 %1100
  store double %1098, double* %1101, align 8, !tbaa !6
  %1102 = load double, double* %825, align 8, !tbaa !6
  %1103 = fsub fast double %976, %939
  %1104 = fmul fast double %1103, -1.950000e+00
  %1105 = fsub fast double %993, %960
  %1106 = fmul fast double %1105, 0xBFB0ECF56BE69CA7
  %1107 = fadd fast double %1104, %1106
  %1108 = fadd fast double %1107, %1102
  %1109 = add nsw i32 %625, -197988
  %1110 = sext i32 %1109 to i64
  %1111 = getelementptr inbounds double, double* %1, i64 %1110
  store double %1108, double* %1111, align 8, !tbaa !6
  %1112 = load double, double* %830, align 8, !tbaa !6
  %1113 = fsub fast double %960, %993
  %1114 = fmul fast double %1113, 0xBFB0ECF56BE69CA7
  %1115 = fadd fast double %1104, %1114
  %1116 = fadd fast double %1115, %1112
  %1117 = add nsw i32 %625, 198013
  %1118 = sext i32 %1117 to i64
  %1119 = getelementptr inbounds double, double* %1, i64 %1118
  store double %1116, double* %1119, align 8, !tbaa !6
  %1120 = load double, double* %835, align 8, !tbaa !6
  %1121 = fsub fast double %959, %991
  %1122 = fmul fast double %1121, 0xBFB0ECF56BE69CA7
  %1123 = fadd fast double %1094, %1122
  %1124 = fadd fast double %1123, %1120
  %1125 = add nsw i32 %625, -201986
  %1126 = sext i32 %1125 to i64
  %1127 = getelementptr inbounds double, double* %1, i64 %1126
  store double %1124, double* %1127, align 8, !tbaa !6
  %1128 = load double, double* %840, align 8, !tbaa !6
  %1129 = fsub fast double %978, %945
  %1130 = fmul fast double %1129, -1.950000e+00
  %1131 = fsub fast double %995, %961
  %1132 = fmul fast double %1131, 0xBFB0ECF56BE69CA7
  %1133 = fadd fast double %1130, %1132
  %1134 = fadd fast double %1133, %1128
  %1135 = add nsw i32 %625, 200035
  %1136 = sext i32 %1135 to i64
  %1137 = getelementptr inbounds double, double* %1, i64 %1136
  store double %1134, double* %1137, align 8, !tbaa !6
  %1138 = load double, double* %845, align 8, !tbaa !6
  %1139 = fsub fast double %980, %951
  %1140 = fmul fast double %1139, -1.950000e+00
  %1141 = fsub fast double %997, %962
  %1142 = fmul fast double %1141, 0xBFB0ECF56BE69CA7
  %1143 = fadd fast double %1140, %1142
  %1144 = fadd fast double %1143, %1138
  %1145 = add nsw i32 %625, -199964
  %1146 = sext i32 %1145 to i64
  %1147 = getelementptr inbounds double, double* %1, i64 %1146
  store double %1144, double* %1147, align 8, !tbaa !6
  %1148 = load double, double* %850, align 8, !tbaa !6
  %1149 = fsub fast double %962, %997
  %1150 = fmul fast double %1149, 0xBFB0ECF56BE69CA7
  %1151 = fadd fast double %1140, %1150
  %1152 = fadd fast double %1151, %1148
  %1153 = add nsw i32 %625, 199997
  %1154 = sext i32 %1153 to i64
  %1155 = getelementptr inbounds double, double* %1, i64 %1154
  store double %1152, double* %1155, align 8, !tbaa !6
  %1156 = load double, double* %855, align 8, !tbaa !6
  %1157 = fsub fast double %961, %995
  %1158 = fmul fast double %1157, 0xBFB0ECF56BE69CA7
  %1159 = fadd fast double %1130, %1158
  %1160 = fadd fast double %1159, %1156
  %1161 = add nsw i32 %625, -200002
  %1162 = sext i32 %1161 to i64
  %1163 = getelementptr inbounds double, double* %1, i64 %1162
  store double %1160, double* %1163, align 8, !tbaa !6
  br label %1164

1164:                                             ; preds = %764, %633
  br i1 %622, label %621, label %619, !llvm.loop !23

1165:                                             ; preds = %615
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @LBM_performStreamCollideTRT(double* readonly %0, double* %1) local_unnamed_addr #10 {
  br label %3

3:                                                ; preds = %2, %468
  %4 = phi i64 [ 0, %2 ], [ %469, %468 ]
  %5 = add nuw nsw i64 %4, 19
  %6 = getelementptr inbounds double, double* %0, i64 %5
  %7 = bitcast double* %6 to i32*
  %8 = load i32, i32* %7, align 4, !tbaa !8
  %9 = and i32 %8, 1
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %105, label %11

11:                                               ; preds = %3
  %12 = getelementptr inbounds double, double* %0, i64 %4
  %13 = load double, double* %12, align 8, !tbaa !6
  %14 = getelementptr inbounds double, double* %1, i64 %4
  store double %13, double* %14, align 8, !tbaa !6
  %15 = or i64 %4, 1
  %16 = getelementptr inbounds double, double* %0, i64 %15
  %17 = load double, double* %16, align 8, !tbaa !6
  %18 = add nsw i64 %4, -1998
  %19 = getelementptr inbounds double, double* %1, i64 %18
  store double %17, double* %19, align 8, !tbaa !6
  %20 = or i64 %4, 2
  %21 = getelementptr inbounds double, double* %0, i64 %20
  %22 = load double, double* %21, align 8, !tbaa !6
  %23 = add nuw nsw i64 %4, 2001
  %24 = getelementptr inbounds double, double* %1, i64 %23
  store double %22, double* %24, align 8, !tbaa !6
  %25 = or i64 %4, 3
  %26 = getelementptr inbounds double, double* %0, i64 %25
  %27 = load double, double* %26, align 8, !tbaa !6
  %28 = add nsw i64 %4, -16
  %29 = getelementptr inbounds double, double* %1, i64 %28
  store double %27, double* %29, align 8, !tbaa !6
  %30 = add nuw nsw i64 %4, 4
  %31 = getelementptr inbounds double, double* %0, i64 %30
  %32 = load double, double* %31, align 8, !tbaa !6
  %33 = add nuw nsw i64 %4, 23
  %34 = getelementptr inbounds double, double* %1, i64 %33
  store double %32, double* %34, align 8, !tbaa !6
  %35 = add nuw nsw i64 %4, 5
  %36 = getelementptr inbounds double, double* %0, i64 %35
  %37 = load double, double* %36, align 8, !tbaa !6
  %38 = add nsw i64 %4, -199994
  %39 = getelementptr inbounds double, double* %1, i64 %38
  store double %37, double* %39, align 8, !tbaa !6
  %40 = add nuw nsw i64 %4, 6
  %41 = getelementptr inbounds double, double* %0, i64 %40
  %42 = load double, double* %41, align 8, !tbaa !6
  %43 = add nuw nsw i64 %4, 200005
  %44 = getelementptr inbounds double, double* %1, i64 %43
  store double %42, double* %44, align 8, !tbaa !6
  %45 = add nuw nsw i64 %4, 7
  %46 = getelementptr inbounds double, double* %0, i64 %45
  %47 = load double, double* %46, align 8, !tbaa !6
  %48 = add nsw i64 %4, -2010
  %49 = getelementptr inbounds double, double* %1, i64 %48
  store double %47, double* %49, align 8, !tbaa !6
  %50 = add nuw nsw i64 %4, 8
  %51 = getelementptr inbounds double, double* %0, i64 %50
  %52 = load double, double* %51, align 8, !tbaa !6
  %53 = add nsw i64 %4, -1971
  %54 = getelementptr inbounds double, double* %1, i64 %53
  store double %52, double* %54, align 8, !tbaa !6
  %55 = add nuw nsw i64 %4, 9
  %56 = getelementptr inbounds double, double* %0, i64 %55
  %57 = load double, double* %56, align 8, !tbaa !6
  %58 = add nuw nsw i64 %4, 1988
  %59 = getelementptr inbounds double, double* %1, i64 %58
  store double %57, double* %59, align 8, !tbaa !6
  %60 = add nuw nsw i64 %4, 10
  %61 = getelementptr inbounds double, double* %0, i64 %60
  %62 = load double, double* %61, align 8, !tbaa !6
  %63 = add nuw nsw i64 %4, 2027
  %64 = getelementptr inbounds double, double* %1, i64 %63
  store double %62, double* %64, align 8, !tbaa !6
  %65 = add nuw nsw i64 %4, 11
  %66 = getelementptr inbounds double, double* %0, i64 %65
  %67 = load double, double* %66, align 8, !tbaa !6
  %68 = add nsw i64 %4, -201986
  %69 = getelementptr inbounds double, double* %1, i64 %68
  store double %67, double* %69, align 8, !tbaa !6
  %70 = add nuw nsw i64 %4, 12
  %71 = getelementptr inbounds double, double* %0, i64 %70
  %72 = load double, double* %71, align 8, !tbaa !6
  %73 = add nuw nsw i64 %4, 198013
  %74 = getelementptr inbounds double, double* %1, i64 %73
  store double %72, double* %74, align 8, !tbaa !6
  %75 = add nuw nsw i64 %4, 13
  %76 = getelementptr inbounds double, double* %0, i64 %75
  %77 = load double, double* %76, align 8, !tbaa !6
  %78 = add nsw i64 %4, -197988
  %79 = getelementptr inbounds double, double* %1, i64 %78
  store double %77, double* %79, align 8, !tbaa !6
  %80 = add nuw nsw i64 %4, 14
  %81 = getelementptr inbounds double, double* %0, i64 %80
  %82 = load double, double* %81, align 8, !tbaa !6
  %83 = add nuw nsw i64 %4, 202011
  %84 = getelementptr inbounds double, double* %1, i64 %83
  store double %82, double* %84, align 8, !tbaa !6
  %85 = add nuw nsw i64 %4, 15
  %86 = getelementptr inbounds double, double* %0, i64 %85
  %87 = load double, double* %86, align 8, !tbaa !6
  %88 = add nsw i64 %4, -200002
  %89 = getelementptr inbounds double, double* %1, i64 %88
  store double %87, double* %89, align 8, !tbaa !6
  %90 = add nuw nsw i64 %4, 16
  %91 = getelementptr inbounds double, double* %0, i64 %90
  %92 = load double, double* %91, align 8, !tbaa !6
  %93 = add nuw nsw i64 %4, 199997
  %94 = getelementptr inbounds double, double* %1, i64 %93
  store double %92, double* %94, align 8, !tbaa !6
  %95 = add nuw nsw i64 %4, 17
  %96 = getelementptr inbounds double, double* %0, i64 %95
  %97 = load double, double* %96, align 8, !tbaa !6
  %98 = add nsw i64 %4, -199964
  %99 = getelementptr inbounds double, double* %1, i64 %98
  store double %97, double* %99, align 8, !tbaa !6
  %100 = add nuw nsw i64 %4, 18
  %101 = getelementptr inbounds double, double* %0, i64 %100
  %102 = load double, double* %101, align 8, !tbaa !6
  %103 = add nuw nsw i64 %4, 200035
  %104 = getelementptr inbounds double, double* %1, i64 %103
  store double %102, double* %104, align 8, !tbaa !6
  br label %468

105:                                              ; preds = %3
  %106 = getelementptr inbounds double, double* %0, i64 %4
  %107 = load double, double* %106, align 8, !tbaa !6
  %108 = or i64 %4, 1
  %109 = getelementptr inbounds double, double* %0, i64 %108
  %110 = load double, double* %109, align 8, !tbaa !6
  %111 = fadd fast double %110, %107
  %112 = or i64 %4, 2
  %113 = getelementptr inbounds double, double* %0, i64 %112
  %114 = load double, double* %113, align 8, !tbaa !6
  %115 = fadd fast double %111, %114
  %116 = or i64 %4, 3
  %117 = getelementptr inbounds double, double* %0, i64 %116
  %118 = load double, double* %117, align 8, !tbaa !6
  %119 = fadd fast double %115, %118
  %120 = add nuw nsw i64 %4, 4
  %121 = getelementptr inbounds double, double* %0, i64 %120
  %122 = load double, double* %121, align 8, !tbaa !6
  %123 = fadd fast double %119, %122
  %124 = add nuw nsw i64 %4, 5
  %125 = getelementptr inbounds double, double* %0, i64 %124
  %126 = load double, double* %125, align 8, !tbaa !6
  %127 = fadd fast double %123, %126
  %128 = add nuw nsw i64 %4, 6
  %129 = getelementptr inbounds double, double* %0, i64 %128
  %130 = load double, double* %129, align 8, !tbaa !6
  %131 = fadd fast double %127, %130
  %132 = add nuw nsw i64 %4, 7
  %133 = getelementptr inbounds double, double* %0, i64 %132
  %134 = load double, double* %133, align 8, !tbaa !6
  %135 = fadd fast double %131, %134
  %136 = add nuw nsw i64 %4, 8
  %137 = getelementptr inbounds double, double* %0, i64 %136
  %138 = load double, double* %137, align 8, !tbaa !6
  %139 = fadd fast double %135, %138
  %140 = add nuw nsw i64 %4, 9
  %141 = getelementptr inbounds double, double* %0, i64 %140
  %142 = load double, double* %141, align 8, !tbaa !6
  %143 = fadd fast double %139, %142
  %144 = add nuw nsw i64 %4, 10
  %145 = getelementptr inbounds double, double* %0, i64 %144
  %146 = load double, double* %145, align 8, !tbaa !6
  %147 = fadd fast double %143, %146
  %148 = add nuw nsw i64 %4, 11
  %149 = getelementptr inbounds double, double* %0, i64 %148
  %150 = load double, double* %149, align 8, !tbaa !6
  %151 = fadd fast double %147, %150
  %152 = add nuw nsw i64 %4, 12
  %153 = getelementptr inbounds double, double* %0, i64 %152
  %154 = load double, double* %153, align 8, !tbaa !6
  %155 = fadd fast double %151, %154
  %156 = add nuw nsw i64 %4, 13
  %157 = getelementptr inbounds double, double* %0, i64 %156
  %158 = load double, double* %157, align 8, !tbaa !6
  %159 = fadd fast double %155, %158
  %160 = add nuw nsw i64 %4, 14
  %161 = getelementptr inbounds double, double* %0, i64 %160
  %162 = load double, double* %161, align 8, !tbaa !6
  %163 = fadd fast double %159, %162
  %164 = add nuw nsw i64 %4, 15
  %165 = getelementptr inbounds double, double* %0, i64 %164
  %166 = load double, double* %165, align 8, !tbaa !6
  %167 = fadd fast double %163, %166
  %168 = add nuw nsw i64 %4, 16
  %169 = getelementptr inbounds double, double* %0, i64 %168
  %170 = load double, double* %169, align 8, !tbaa !6
  %171 = fadd fast double %167, %170
  %172 = add nuw nsw i64 %4, 17
  %173 = getelementptr inbounds double, double* %0, i64 %172
  %174 = load double, double* %173, align 8, !tbaa !6
  %175 = fadd fast double %171, %174
  %176 = add nuw nsw i64 %4, 18
  %177 = getelementptr inbounds double, double* %0, i64 %176
  %178 = load double, double* %177, align 8, !tbaa !6
  %179 = fadd fast double %175, %178
  %180 = fadd fast double %118, %134
  %181 = fadd fast double %122, %138
  %182 = fadd fast double %180, %142
  %183 = fadd fast double %181, %146
  %184 = fsub fast double %182, %183
  %185 = fadd fast double %184, %166
  %186 = fadd fast double %185, %170
  %187 = fadd fast double %174, %178
  %188 = fsub fast double %186, %187
  %189 = fsub fast double %110, %114
  %190 = fadd fast double %134, %189
  %191 = fadd fast double %190, %138
  %192 = fadd fast double %142, %146
  %193 = fsub fast double %191, %192
  %194 = fadd fast double %193, %150
  %195 = fadd fast double %194, %154
  %196 = fadd fast double %158, %162
  %197 = fsub fast double %195, %196
  %198 = fadd fast double %126, %150
  %199 = fadd fast double %130, %154
  %200 = fadd fast double %198, %158
  %201 = fadd fast double %199, %162
  %202 = fadd fast double %200, %166
  %203 = fadd fast double %201, %170
  %204 = fadd fast double %202, %174
  %205 = fadd fast double %203, %178
  %206 = fsub fast double %204, %205
  %207 = fdiv fast double %188, %179
  %208 = fdiv fast double %197, %179
  %209 = fdiv fast double %206, %179
  %210 = and i32 %8, 2
  %211 = icmp eq i32 %210, 0
  %212 = select i1 %211, double %209, double 0.000000e+00
  %213 = select i1 %211, double %208, double 2.000000e-03
  %214 = select i1 %211, double %207, double 5.000000e-03
  %215 = fmul fast double %214, %214
  %216 = fmul fast double %213, %213
  %217 = fadd fast double %215, %216
  %218 = fmul fast double %212, %212
  %219 = fadd fast double %217, %218
  %220 = fmul fast double %219, 1.500000e+00
  %221 = fmul fast double %179, 0x3FD5555555555555
  %222 = fsub fast double 1.000000e+00, %220
  %223 = fmul fast double %221, %222
  %224 = fmul fast double %179, 0x3FAC71C71C71C71C
  %225 = fmul fast double %216, 4.500000e+00
  %226 = fadd fast double %225, 1.000000e+00
  %227 = fsub fast double %226, %220
  %228 = fmul fast double %227, %224
  %229 = fmul fast double %215, 4.500000e+00
  %230 = fadd fast double %229, 1.000000e+00
  %231 = fsub fast double %230, %220
  %232 = fmul fast double %231, %224
  %233 = fmul fast double %218, 4.500000e+00
  %234 = fadd fast double %233, 1.000000e+00
  %235 = fsub fast double %234, %220
  %236 = fmul fast double %235, %224
  %237 = fmul fast double %179, 0x3F9C71C71C71C71C
  %238 = fadd fast double %214, %213
  %239 = fmul fast double %238, %238
  %240 = fmul fast double %239, 4.500000e+00
  %241 = fadd fast double %240, 1.000000e+00
  %242 = fsub fast double %241, %220
  %243 = fmul fast double %242, %237
  %244 = fsub fast double %213, %214
  %245 = fmul fast double %244, %244
  %246 = fmul fast double %245, 4.500000e+00
  %247 = fadd fast double %246, 1.000000e+00
  %248 = fsub fast double %247, %220
  %249 = fmul fast double %248, %237
  %250 = fadd fast double %213, %212
  %251 = fmul fast double %250, %250
  %252 = fmul fast double %251, 4.500000e+00
  %253 = fadd fast double %252, 1.000000e+00
  %254 = fsub fast double %253, %220
  %255 = fmul fast double %254, %237
  %256 = fsub fast double %213, %212
  %257 = fmul fast double %256, %256
  %258 = fmul fast double %257, 4.500000e+00
  %259 = fadd fast double %258, 1.000000e+00
  %260 = fsub fast double %259, %220
  %261 = fmul fast double %260, %237
  %262 = fadd fast double %214, %212
  %263 = fmul fast double %262, %262
  %264 = fmul fast double %263, 4.500000e+00
  %265 = fadd fast double %264, 1.000000e+00
  %266 = fsub fast double %265, %220
  %267 = fmul fast double %266, %237
  %268 = fsub fast double %214, %212
  %269 = fmul fast double %268, %268
  %270 = fmul fast double %269, 4.500000e+00
  %271 = fadd fast double %270, 1.000000e+00
  %272 = fsub fast double %271, %220
  %273 = fmul fast double %272, %237
  %274 = fmul fast double %179, 0x3FC5555555555555
  %275 = fmul fast double %213, %274
  %276 = fmul fast double %214, %274
  %277 = fmul fast double %212, %274
  %278 = fmul fast double %179, 0x3FB5555555555555
  %279 = fmul fast double %238, %278
  %280 = fmul fast double %244, %278
  %281 = fmul fast double %250, %278
  %282 = fmul fast double %256, %278
  %283 = fmul fast double %262, %278
  %284 = fmul fast double %268, %278
  %285 = fadd fast double %114, %110
  %286 = fmul fast double %285, 5.000000e-01
  %287 = fadd fast double %122, %118
  %288 = fmul fast double %287, 5.000000e-01
  %289 = fadd fast double %130, %126
  %290 = fmul fast double %289, 5.000000e-01
  %291 = fadd fast double %146, %134
  %292 = fmul fast double %291, 5.000000e-01
  %293 = fadd fast double %142, %138
  %294 = fmul fast double %293, 5.000000e-01
  %295 = fadd fast double %162, %150
  %296 = fmul fast double %295, 5.000000e-01
  %297 = fadd fast double %158, %154
  %298 = fmul fast double %297, 5.000000e-01
  %299 = fadd fast double %178, %166
  %300 = fmul fast double %299, 5.000000e-01
  %301 = fadd fast double %174, %170
  %302 = fmul fast double %301, 5.000000e-01
  %303 = fmul fast double %189, 5.000000e-01
  %304 = fsub fast double %118, %122
  %305 = fmul fast double %304, 5.000000e-01
  %306 = fsub fast double %126, %130
  %307 = fmul fast double %306, 5.000000e-01
  %308 = fsub fast double %134, %146
  %309 = fmul fast double %308, 5.000000e-01
  %310 = fsub fast double %138, %142
  %311 = fmul fast double %310, 5.000000e-01
  %312 = fsub fast double %150, %162
  %313 = fmul fast double %312, 5.000000e-01
  %314 = fsub fast double %154, %158
  %315 = fmul fast double %314, 5.000000e-01
  %316 = fsub fast double %166, %178
  %317 = fmul fast double %316, 5.000000e-01
  %318 = fsub fast double %170, %174
  %319 = fmul fast double %318, 5.000000e-01
  %320 = fsub fast double %107, %223
  %321 = fmul fast double %320, 1.950000e+00
  %322 = fsub fast double %107, %321
  %323 = getelementptr inbounds double, double* %1, i64 %4
  store double %322, double* %323, align 8, !tbaa !6
  %324 = load double, double* %109, align 8, !tbaa !6
  %325 = fsub fast double %286, %228
  %326 = fmul fast double %325, -1.950000e+00
  %327 = fsub fast double %303, %275
  %328 = fmul fast double %327, 0xBFB0ECF56BE69CA7
  %329 = fadd fast double %328, %324
  %330 = fadd fast double %329, %326
  %331 = add nuw nsw i64 %4, 2001
  %332 = getelementptr inbounds double, double* %1, i64 %331
  store double %330, double* %332, align 8, !tbaa !6
  %333 = load double, double* %113, align 8, !tbaa !6
  %334 = fsub fast double %275, %303
  %335 = fmul fast double %334, 0xBFB0ECF56BE69CA7
  %336 = fadd fast double %335, %333
  %337 = fadd fast double %336, %326
  %338 = add nsw i64 %4, -1998
  %339 = getelementptr inbounds double, double* %1, i64 %338
  store double %337, double* %339, align 8, !tbaa !6
  %340 = load double, double* %117, align 8, !tbaa !6
  %341 = fsub fast double %288, %232
  %342 = fmul fast double %341, -1.950000e+00
  %343 = fsub fast double %305, %276
  %344 = fmul fast double %343, 0xBFB0ECF56BE69CA7
  %345 = fadd fast double %340, %344
  %346 = fadd fast double %345, %342
  %347 = add nuw nsw i64 %4, 23
  %348 = getelementptr inbounds double, double* %1, i64 %347
  store double %346, double* %348, align 8, !tbaa !6
  %349 = load double, double* %121, align 8, !tbaa !6
  %350 = fsub fast double %276, %305
  %351 = fmul fast double %350, 0xBFB0ECF56BE69CA7
  %352 = fadd fast double %349, %351
  %353 = fadd fast double %352, %342
  %354 = add nsw i64 %4, -16
  %355 = getelementptr inbounds double, double* %1, i64 %354
  store double %353, double* %355, align 8, !tbaa !6
  %356 = load double, double* %125, align 8, !tbaa !6
  %357 = fsub fast double %290, %236
  %358 = fmul fast double %357, -1.950000e+00
  %359 = fsub fast double %307, %277
  %360 = fmul fast double %359, 0xBFB0ECF56BE69CA7
  %361 = fadd fast double %356, %360
  %362 = fadd fast double %361, %358
  %363 = add nuw nsw i64 %4, 200005
  %364 = getelementptr inbounds double, double* %1, i64 %363
  store double %362, double* %364, align 8, !tbaa !6
  %365 = load double, double* %129, align 8, !tbaa !6
  %366 = fsub fast double %277, %307
  %367 = fmul fast double %366, 0xBFB0ECF56BE69CA7
  %368 = fadd fast double %358, %367
  %369 = fadd fast double %368, %365
  %370 = add nsw i64 %4, -199994
  %371 = getelementptr inbounds double, double* %1, i64 %370
  store double %369, double* %371, align 8, !tbaa !6
  %372 = load double, double* %133, align 8, !tbaa !6
  %373 = fsub fast double %292, %243
  %374 = fmul fast double %373, -1.950000e+00
  %375 = fsub fast double %309, %279
  %376 = fmul fast double %375, 0xBFB0ECF56BE69CA7
  %377 = fadd fast double %374, %376
  %378 = fadd fast double %377, %372
  %379 = add nuw nsw i64 %4, 2027
  %380 = getelementptr inbounds double, double* %1, i64 %379
  store double %378, double* %380, align 8, !tbaa !6
  %381 = load double, double* %137, align 8, !tbaa !6
  %382 = fsub fast double %294, %249
  %383 = fmul fast double %382, -1.950000e+00
  %384 = fsub fast double %311, %280
  %385 = fmul fast double %384, 0xBFB0ECF56BE69CA7
  %386 = fadd fast double %383, %385
  %387 = fadd fast double %386, %381
  %388 = add nuw nsw i64 %4, 1988
  %389 = getelementptr inbounds double, double* %1, i64 %388
  store double %387, double* %389, align 8, !tbaa !6
  %390 = load double, double* %141, align 8, !tbaa !6
  %391 = fsub fast double %280, %311
  %392 = fmul fast double %391, 0xBFB0ECF56BE69CA7
  %393 = fadd fast double %383, %392
  %394 = fadd fast double %393, %390
  %395 = add nsw i64 %4, -1971
  %396 = getelementptr inbounds double, double* %1, i64 %395
  store double %394, double* %396, align 8, !tbaa !6
  %397 = load double, double* %145, align 8, !tbaa !6
  %398 = fsub fast double %279, %309
  %399 = fmul fast double %398, 0xBFB0ECF56BE69CA7
  %400 = fadd fast double %374, %399
  %401 = fadd fast double %400, %397
  %402 = add nsw i64 %4, -2010
  %403 = getelementptr inbounds double, double* %1, i64 %402
  store double %401, double* %403, align 8, !tbaa !6
  %404 = load double, double* %149, align 8, !tbaa !6
  %405 = fsub fast double %296, %255
  %406 = fmul fast double %405, -1.950000e+00
  %407 = fsub fast double %313, %281
  %408 = fmul fast double %407, 0xBFB0ECF56BE69CA7
  %409 = fadd fast double %406, %408
  %410 = fadd fast double %409, %404
  %411 = add nuw nsw i64 %4, 202011
  %412 = getelementptr inbounds double, double* %1, i64 %411
  store double %410, double* %412, align 8, !tbaa !6
  %413 = load double, double* %153, align 8, !tbaa !6
  %414 = fsub fast double %298, %261
  %415 = fmul fast double %414, -1.950000e+00
  %416 = fsub fast double %315, %282
  %417 = fmul fast double %416, 0xBFB0ECF56BE69CA7
  %418 = fadd fast double %415, %417
  %419 = fadd fast double %418, %413
  %420 = add nsw i64 %4, -197988
  %421 = getelementptr inbounds double, double* %1, i64 %420
  store double %419, double* %421, align 8, !tbaa !6
  %422 = load double, double* %157, align 8, !tbaa !6
  %423 = fsub fast double %282, %315
  %424 = fmul fast double %423, 0xBFB0ECF56BE69CA7
  %425 = fadd fast double %415, %424
  %426 = fadd fast double %425, %422
  %427 = add nuw nsw i64 %4, 198013
  %428 = getelementptr inbounds double, double* %1, i64 %427
  store double %426, double* %428, align 8, !tbaa !6
  %429 = load double, double* %161, align 8, !tbaa !6
  %430 = fsub fast double %281, %313
  %431 = fmul fast double %430, 0xBFB0ECF56BE69CA7
  %432 = fadd fast double %406, %431
  %433 = fadd fast double %432, %429
  %434 = add nsw i64 %4, -201986
  %435 = getelementptr inbounds double, double* %1, i64 %434
  store double %433, double* %435, align 8, !tbaa !6
  %436 = load double, double* %165, align 8, !tbaa !6
  %437 = fsub fast double %300, %267
  %438 = fmul fast double %437, -1.950000e+00
  %439 = fsub fast double %317, %283
  %440 = fmul fast double %439, 0xBFB0ECF56BE69CA7
  %441 = fadd fast double %438, %440
  %442 = fadd fast double %441, %436
  %443 = add nuw nsw i64 %4, 200035
  %444 = getelementptr inbounds double, double* %1, i64 %443
  store double %442, double* %444, align 8, !tbaa !6
  %445 = load double, double* %169, align 8, !tbaa !6
  %446 = fsub fast double %302, %273
  %447 = fmul fast double %446, -1.950000e+00
  %448 = fsub fast double %319, %284
  %449 = fmul fast double %448, 0xBFB0ECF56BE69CA7
  %450 = fadd fast double %447, %449
  %451 = fadd fast double %450, %445
  %452 = add nsw i64 %4, -199964
  %453 = getelementptr inbounds double, double* %1, i64 %452
  store double %451, double* %453, align 8, !tbaa !6
  %454 = load double, double* %173, align 8, !tbaa !6
  %455 = fsub fast double %284, %319
  %456 = fmul fast double %455, 0xBFB0ECF56BE69CA7
  %457 = fadd fast double %447, %456
  %458 = fadd fast double %457, %454
  %459 = add nuw nsw i64 %4, 199997
  %460 = getelementptr inbounds double, double* %1, i64 %459
  store double %458, double* %460, align 8, !tbaa !6
  %461 = load double, double* %177, align 8, !tbaa !6
  %462 = fsub fast double %283, %317
  %463 = fmul fast double %462, 0xBFB0ECF56BE69CA7
  %464 = fadd fast double %438, %463
  %465 = fadd fast double %464, %461
  %466 = add nsw i64 %4, -200002
  %467 = getelementptr inbounds double, double* %1, i64 %466
  store double %465, double* %467, align 8, !tbaa !6
  br label %468

468:                                              ; preds = %105, %11
  %469 = add nuw nsw i64 %4, 20
  %470 = icmp ult i64 %4, 25999980
  br i1 %470, label %3, label %471, !llvm.loop !24

471:                                              ; preds = %468
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable
define dso_local void @LBM_handleInOutFlow(double* %0) local_unnamed_addr #10 {
  br label %2

2:                                                ; preds = %1, %2
  %3 = phi i64 [ 0, %1 ], [ %233, %2 ]
  %4 = phi i32 [ 0, %1 ], [ %234, %2 ]
  %5 = add nuw nsw i64 %3, 200000
  %6 = getelementptr inbounds double, double* %0, i64 %5
  %7 = load double, double* %6, align 8, !tbaa !6
  %8 = add nuw nsw i64 %3, 200001
  %9 = getelementptr inbounds double, double* %0, i64 %8
  %10 = load double, double* %9, align 8, !tbaa !6
  %11 = fadd fast double %10, %7
  %12 = add nuw nsw i64 %3, 200002
  %13 = getelementptr inbounds double, double* %0, i64 %12
  %14 = load double, double* %13, align 8, !tbaa !6
  %15 = fadd fast double %11, %14
  %16 = add nuw nsw i64 %3, 200003
  %17 = getelementptr inbounds double, double* %0, i64 %16
  %18 = load double, double* %17, align 8, !tbaa !6
  %19 = fadd fast double %15, %18
  %20 = add nuw nsw i64 %3, 200004
  %21 = getelementptr inbounds double, double* %0, i64 %20
  %22 = load double, double* %21, align 8, !tbaa !6
  %23 = fadd fast double %19, %22
  %24 = add nuw nsw i64 %3, 200005
  %25 = getelementptr inbounds double, double* %0, i64 %24
  %26 = load double, double* %25, align 8, !tbaa !6
  %27 = fadd fast double %23, %26
  %28 = add nuw nsw i64 %3, 200006
  %29 = getelementptr inbounds double, double* %0, i64 %28
  %30 = load double, double* %29, align 8, !tbaa !6
  %31 = fadd fast double %27, %30
  %32 = add nuw nsw i64 %3, 200007
  %33 = getelementptr inbounds double, double* %0, i64 %32
  %34 = load double, double* %33, align 8, !tbaa !6
  %35 = fadd fast double %31, %34
  %36 = add nuw nsw i64 %3, 200008
  %37 = getelementptr inbounds double, double* %0, i64 %36
  %38 = load double, double* %37, align 8, !tbaa !6
  %39 = fadd fast double %35, %38
  %40 = add nuw nsw i64 %3, 200009
  %41 = getelementptr inbounds double, double* %0, i64 %40
  %42 = load double, double* %41, align 8, !tbaa !6
  %43 = fadd fast double %39, %42
  %44 = add nuw nsw i64 %3, 200010
  %45 = getelementptr inbounds double, double* %0, i64 %44
  %46 = load double, double* %45, align 8, !tbaa !6
  %47 = fadd fast double %43, %46
  %48 = add nuw nsw i64 %3, 200011
  %49 = getelementptr inbounds double, double* %0, i64 %48
  %50 = load double, double* %49, align 8, !tbaa !6
  %51 = fadd fast double %47, %50
  %52 = add nuw nsw i64 %3, 200012
  %53 = getelementptr inbounds double, double* %0, i64 %52
  %54 = load double, double* %53, align 8, !tbaa !6
  %55 = fadd fast double %51, %54
  %56 = add nuw nsw i64 %3, 200013
  %57 = getelementptr inbounds double, double* %0, i64 %56
  %58 = load double, double* %57, align 8, !tbaa !6
  %59 = fadd fast double %55, %58
  %60 = add nuw nsw i64 %3, 200014
  %61 = getelementptr inbounds double, double* %0, i64 %60
  %62 = load double, double* %61, align 8, !tbaa !6
  %63 = fadd fast double %59, %62
  %64 = add nuw nsw i64 %3, 200015
  %65 = getelementptr inbounds double, double* %0, i64 %64
  %66 = load double, double* %65, align 8, !tbaa !6
  %67 = fadd fast double %63, %66
  %68 = add nuw nsw i64 %3, 200016
  %69 = getelementptr inbounds double, double* %0, i64 %68
  %70 = load double, double* %69, align 8, !tbaa !6
  %71 = fadd fast double %67, %70
  %72 = add nuw nsw i64 %3, 200017
  %73 = getelementptr inbounds double, double* %0, i64 %72
  %74 = load double, double* %73, align 8, !tbaa !6
  %75 = fadd fast double %71, %74
  %76 = add nuw nsw i64 %3, 200018
  %77 = getelementptr inbounds double, double* %0, i64 %76
  %78 = load double, double* %77, align 8, !tbaa !6
  %79 = fadd fast double %75, %78
  %80 = add nuw nsw i64 %3, 400000
  %81 = getelementptr inbounds double, double* %0, i64 %80
  %82 = load double, double* %81, align 8, !tbaa !6
  %83 = add nuw nsw i64 %3, 400001
  %84 = getelementptr inbounds double, double* %0, i64 %83
  %85 = load double, double* %84, align 8, !tbaa !6
  %86 = add nuw nsw i64 %3, 400002
  %87 = getelementptr inbounds double, double* %0, i64 %86
  %88 = load double, double* %87, align 8, !tbaa !6
  %89 = add nuw nsw i64 %3, 400003
  %90 = getelementptr inbounds double, double* %0, i64 %89
  %91 = load double, double* %90, align 8, !tbaa !6
  %92 = add nuw nsw i64 %3, 400004
  %93 = getelementptr inbounds double, double* %0, i64 %92
  %94 = load double, double* %93, align 8, !tbaa !6
  %95 = add nuw nsw i64 %3, 400005
  %96 = getelementptr inbounds double, double* %0, i64 %95
  %97 = load double, double* %96, align 8, !tbaa !6
  %98 = add nuw nsw i64 %3, 400006
  %99 = getelementptr inbounds double, double* %0, i64 %98
  %100 = load double, double* %99, align 8, !tbaa !6
  %101 = add nuw nsw i64 %3, 400007
  %102 = getelementptr inbounds double, double* %0, i64 %101
  %103 = load double, double* %102, align 8, !tbaa !6
  %104 = add nuw nsw i64 %3, 400008
  %105 = getelementptr inbounds double, double* %0, i64 %104
  %106 = load double, double* %105, align 8, !tbaa !6
  %107 = add nuw nsw i64 %3, 400009
  %108 = getelementptr inbounds double, double* %0, i64 %107
  %109 = load double, double* %108, align 8, !tbaa !6
  %110 = add nuw nsw i64 %3, 400010
  %111 = getelementptr inbounds double, double* %0, i64 %110
  %112 = load double, double* %111, align 8, !tbaa !6
  %113 = add nuw nsw i64 %3, 400011
  %114 = getelementptr inbounds double, double* %0, i64 %113
  %115 = load double, double* %114, align 8, !tbaa !6
  %116 = add nuw nsw i64 %3, 400012
  %117 = getelementptr inbounds double, double* %0, i64 %116
  %118 = load double, double* %117, align 8, !tbaa !6
  %119 = add nuw nsw i64 %3, 400013
  %120 = getelementptr inbounds double, double* %0, i64 %119
  %121 = load double, double* %120, align 8, !tbaa !6
  %122 = add nuw nsw i64 %3, 400014
  %123 = getelementptr inbounds double, double* %0, i64 %122
  %124 = load double, double* %123, align 8, !tbaa !6
  %125 = add nuw nsw i64 %3, 400015
  %126 = getelementptr inbounds double, double* %0, i64 %125
  %127 = load double, double* %126, align 8, !tbaa !6
  %128 = add nuw nsw i64 %3, 400016
  %129 = getelementptr inbounds double, double* %0, i64 %128
  %130 = load double, double* %129, align 8, !tbaa !6
  %131 = add nuw nsw i64 %3, 400017
  %132 = getelementptr inbounds double, double* %0, i64 %131
  %133 = load double, double* %132, align 8, !tbaa !6
  %134 = add nuw nsw i64 %3, 400018
  %135 = getelementptr inbounds double, double* %0, i64 %134
  %136 = load double, double* %135, align 8, !tbaa !6
  %137 = fmul fast double %79, 2.000000e+00
  %138 = fadd fast double %82, %85
  %139 = fadd fast double %138, %88
  %140 = fadd fast double %139, %91
  %141 = fadd fast double %140, %94
  %142 = fadd fast double %141, %97
  %143 = fadd fast double %142, %100
  %144 = fadd fast double %143, %103
  %145 = fadd fast double %144, %106
  %146 = fadd fast double %145, %109
  %147 = fadd fast double %146, %112
  %148 = fadd fast double %147, %115
  %149 = fadd fast double %148, %118
  %150 = fadd fast double %149, %121
  %151 = fadd fast double %150, %124
  %152 = fadd fast double %151, %127
  %153 = fadd fast double %152, %130
  %154 = fadd fast double %153, %133
  %155 = fadd fast double %154, %136
  %156 = fsub fast double %137, %155
  %157 = udiv i32 %4, 20
  %158 = trunc i32 %157 to i16
  %159 = urem i16 %158, 100
  %160 = uitofp i16 %159 to double
  %161 = fmul fast double %160, 0x3F94AFD6A052BF5B
  %162 = fadd fast double %161, -1.000000e+00
  %163 = trunc i64 %3 to i32
  %164 = udiv i32 %163, 2000
  %165 = trunc i32 %164 to i8
  %166 = urem i8 %165, 100
  %167 = uitofp i8 %166 to double
  %168 = fmul fast double %167, 0x3F94AFD6A052BF5B
  %169 = fadd fast double %168, -1.000000e+00
  %170 = fmul fast double %162, %162
  %171 = fmul fast double %170, 1.000000e-02
  %172 = fsub fast double 1.000000e-02, %171
  %173 = fmul fast double %169, %169
  %174 = fsub fast double 1.000000e+00, %173
  %175 = fmul fast double %172, %174
  %176 = fmul fast double %175, %175
  %177 = fmul fast double %176, 1.500000e+00
  %178 = fsub fast double 1.000000e+00, %177
  %179 = fmul fast double %178, 0x3FD5555555555555
  %180 = fmul fast double %179, %156
  %181 = getelementptr inbounds double, double* %0, i64 %3
  store double %180, double* %181, align 8, !tbaa !6
  %182 = fmul fast double %156, 0x3FAC71C71C71C71C
  %183 = fmul fast double %182, %178
  %184 = or i64 %3, 1
  %185 = getelementptr inbounds double, double* %0, i64 %184
  store double %183, double* %185, align 8, !tbaa !6
  %186 = or i64 %3, 2
  %187 = getelementptr inbounds double, double* %0, i64 %186
  store double %183, double* %187, align 8, !tbaa !6
  %188 = or i64 %3, 3
  %189 = getelementptr inbounds double, double* %0, i64 %188
  store double %183, double* %189, align 8, !tbaa !6
  %190 = add nuw nsw i64 %3, 4
  %191 = getelementptr inbounds double, double* %0, i64 %190
  store double %183, double* %191, align 8, !tbaa !6
  %192 = fmul fast double %175, 4.500000e+00
  %193 = fadd fast double %192, 3.000000e+00
  %194 = fmul fast double %193, %175
  %195 = fadd fast double %178, %194
  %196 = fmul fast double %182, %195
  %197 = add nuw nsw i64 %3, 5
  %198 = getelementptr inbounds double, double* %0, i64 %197
  store double %196, double* %198, align 8, !tbaa !6
  %199 = fadd fast double %192, -3.000000e+00
  %200 = fmul fast double %199, %175
  %201 = fadd fast double %178, %200
  %202 = fmul fast double %182, %201
  %203 = add nuw nsw i64 %3, 6
  %204 = getelementptr inbounds double, double* %0, i64 %203
  store double %202, double* %204, align 8, !tbaa !6
  %205 = fmul fast double %156, 0x3F9C71C71C71C71C
  %206 = fmul fast double %205, %178
  %207 = add nuw nsw i64 %3, 7
  %208 = getelementptr inbounds double, double* %0, i64 %207
  store double %206, double* %208, align 8, !tbaa !6
  %209 = add nuw nsw i64 %3, 8
  %210 = getelementptr inbounds double, double* %0, i64 %209
  store double %206, double* %210, align 8, !tbaa !6
  %211 = add nuw nsw i64 %3, 9
  %212 = getelementptr inbounds double, double* %0, i64 %211
  store double %206, double* %212, align 8, !tbaa !6
  %213 = add nuw nsw i64 %3, 10
  %214 = getelementptr inbounds double, double* %0, i64 %213
  store double %206, double* %214, align 8, !tbaa !6
  %215 = fmul fast double %205, %195
  %216 = add nuw nsw i64 %3, 11
  %217 = getelementptr inbounds double, double* %0, i64 %216
  store double %215, double* %217, align 8, !tbaa !6
  %218 = fmul fast double %205, %201
  %219 = add nuw nsw i64 %3, 12
  %220 = getelementptr inbounds double, double* %0, i64 %219
  store double %218, double* %220, align 8, !tbaa !6
  %221 = add nuw nsw i64 %3, 13
  %222 = getelementptr inbounds double, double* %0, i64 %221
  store double %215, double* %222, align 8, !tbaa !6
  %223 = add nuw nsw i64 %3, 14
  %224 = getelementptr inbounds double, double* %0, i64 %223
  store double %218, double* %224, align 8, !tbaa !6
  %225 = add nuw nsw i64 %3, 15
  %226 = getelementptr inbounds double, double* %0, i64 %225
  store double %215, double* %226, align 8, !tbaa !6
  %227 = add nuw nsw i64 %3, 16
  %228 = getelementptr inbounds double, double* %0, i64 %227
  store double %218, double* %228, align 8, !tbaa !6
  %229 = add nuw nsw i64 %3, 17
  %230 = getelementptr inbounds double, double* %0, i64 %229
  store double %215, double* %230, align 8, !tbaa !6
  %231 = add nuw nsw i64 %3, 18
  %232 = getelementptr inbounds double, double* %0, i64 %231
  store double %218, double* %232, align 8, !tbaa !6
  %233 = add nuw nsw i64 %3, 20
  %234 = add nuw nsw i32 %4, 20
  %235 = icmp ult i64 %3, 199980
  br i1 %235, label %2, label %236, !llvm.loop !25

236:                                              ; preds = %2, %236
  %237 = phi i64 [ %615, %236 ], [ 25800000, %2 ]
  %238 = add nsw i64 %237, -200000
  %239 = getelementptr inbounds double, double* %0, i64 %238
  %240 = load double, double* %239, align 8, !tbaa !6
  %241 = add nsw i64 %237, -199999
  %242 = getelementptr inbounds double, double* %0, i64 %241
  %243 = load double, double* %242, align 8, !tbaa !6
  %244 = fadd fast double %243, %240
  %245 = add nsw i64 %237, -199998
  %246 = getelementptr inbounds double, double* %0, i64 %245
  %247 = load double, double* %246, align 8, !tbaa !6
  %248 = fadd fast double %244, %247
  %249 = add nsw i64 %237, -199997
  %250 = getelementptr inbounds double, double* %0, i64 %249
  %251 = load double, double* %250, align 8, !tbaa !6
  %252 = fadd fast double %248, %251
  %253 = add nsw i64 %237, -199996
  %254 = getelementptr inbounds double, double* %0, i64 %253
  %255 = load double, double* %254, align 8, !tbaa !6
  %256 = fadd fast double %252, %255
  %257 = add nsw i64 %237, -199995
  %258 = getelementptr inbounds double, double* %0, i64 %257
  %259 = load double, double* %258, align 8, !tbaa !6
  %260 = fadd fast double %256, %259
  %261 = add nsw i64 %237, -199994
  %262 = getelementptr inbounds double, double* %0, i64 %261
  %263 = load double, double* %262, align 8, !tbaa !6
  %264 = fadd fast double %260, %263
  %265 = add nsw i64 %237, -199993
  %266 = getelementptr inbounds double, double* %0, i64 %265
  %267 = load double, double* %266, align 8, !tbaa !6
  %268 = fadd fast double %264, %267
  %269 = add nsw i64 %237, -199992
  %270 = getelementptr inbounds double, double* %0, i64 %269
  %271 = load double, double* %270, align 8, !tbaa !6
  %272 = fadd fast double %268, %271
  %273 = add nsw i64 %237, -199991
  %274 = getelementptr inbounds double, double* %0, i64 %273
  %275 = load double, double* %274, align 8, !tbaa !6
  %276 = fadd fast double %272, %275
  %277 = add nsw i64 %237, -199990
  %278 = getelementptr inbounds double, double* %0, i64 %277
  %279 = load double, double* %278, align 8, !tbaa !6
  %280 = fadd fast double %276, %279
  %281 = add nsw i64 %237, -199989
  %282 = getelementptr inbounds double, double* %0, i64 %281
  %283 = load double, double* %282, align 8, !tbaa !6
  %284 = fadd fast double %280, %283
  %285 = add nsw i64 %237, -199988
  %286 = getelementptr inbounds double, double* %0, i64 %285
  %287 = load double, double* %286, align 8, !tbaa !6
  %288 = fadd fast double %284, %287
  %289 = add nsw i64 %237, -199987
  %290 = getelementptr inbounds double, double* %0, i64 %289
  %291 = load double, double* %290, align 8, !tbaa !6
  %292 = fadd fast double %288, %291
  %293 = add nsw i64 %237, -199986
  %294 = getelementptr inbounds double, double* %0, i64 %293
  %295 = load double, double* %294, align 8, !tbaa !6
  %296 = fadd fast double %292, %295
  %297 = add nsw i64 %237, -199985
  %298 = getelementptr inbounds double, double* %0, i64 %297
  %299 = load double, double* %298, align 8, !tbaa !6
  %300 = fadd fast double %296, %299
  %301 = add nsw i64 %237, -199984
  %302 = getelementptr inbounds double, double* %0, i64 %301
  %303 = load double, double* %302, align 8, !tbaa !6
  %304 = fadd fast double %300, %303
  %305 = add nsw i64 %237, -199983
  %306 = getelementptr inbounds double, double* %0, i64 %305
  %307 = load double, double* %306, align 8, !tbaa !6
  %308 = fadd fast double %304, %307
  %309 = add nsw i64 %237, -199982
  %310 = getelementptr inbounds double, double* %0, i64 %309
  %311 = load double, double* %310, align 8, !tbaa !6
  %312 = fadd fast double %308, %311
  %313 = fadd fast double %251, %267
  %314 = fadd fast double %255, %271
  %315 = fadd fast double %313, %275
  %316 = fadd fast double %314, %279
  %317 = fsub fast double %315, %316
  %318 = fadd fast double %317, %299
  %319 = fadd fast double %318, %303
  %320 = fadd fast double %307, %311
  %321 = fsub fast double %319, %320
  %322 = fsub fast double %243, %247
  %323 = fadd fast double %322, %267
  %324 = fadd fast double %323, %271
  %325 = fadd fast double %275, %279
  %326 = fsub fast double %324, %325
  %327 = fadd fast double %326, %283
  %328 = fadd fast double %327, %287
  %329 = fadd fast double %291, %295
  %330 = fsub fast double %328, %329
  %331 = fadd fast double %259, %283
  %332 = fadd fast double %263, %287
  %333 = fadd fast double %331, %291
  %334 = fadd fast double %332, %295
  %335 = fadd fast double %333, %299
  %336 = fadd fast double %334, %303
  %337 = fadd fast double %335, %307
  %338 = fadd fast double %336, %311
  %339 = fsub fast double %337, %338
  %340 = add nsw i64 %237, -400000
  %341 = getelementptr inbounds double, double* %0, i64 %340
  %342 = load double, double* %341, align 8, !tbaa !6
  %343 = add nsw i64 %237, -399999
  %344 = getelementptr inbounds double, double* %0, i64 %343
  %345 = load double, double* %344, align 8, !tbaa !6
  %346 = fadd fast double %345, %342
  %347 = add nsw i64 %237, -399998
  %348 = getelementptr inbounds double, double* %0, i64 %347
  %349 = load double, double* %348, align 8, !tbaa !6
  %350 = fadd fast double %346, %349
  %351 = add nsw i64 %237, -399997
  %352 = getelementptr inbounds double, double* %0, i64 %351
  %353 = load double, double* %352, align 8, !tbaa !6
  %354 = fadd fast double %350, %353
  %355 = add nsw i64 %237, -399996
  %356 = getelementptr inbounds double, double* %0, i64 %355
  %357 = load double, double* %356, align 8, !tbaa !6
  %358 = fadd fast double %354, %357
  %359 = add nsw i64 %237, -399995
  %360 = getelementptr inbounds double, double* %0, i64 %359
  %361 = load double, double* %360, align 8, !tbaa !6
  %362 = fadd fast double %358, %361
  %363 = add nsw i64 %237, -399994
  %364 = getelementptr inbounds double, double* %0, i64 %363
  %365 = load double, double* %364, align 8, !tbaa !6
  %366 = fadd fast double %362, %365
  %367 = add nsw i64 %237, -399993
  %368 = getelementptr inbounds double, double* %0, i64 %367
  %369 = load double, double* %368, align 8, !tbaa !6
  %370 = fadd fast double %366, %369
  %371 = add nsw i64 %237, -399992
  %372 = getelementptr inbounds double, double* %0, i64 %371
  %373 = load double, double* %372, align 8, !tbaa !6
  %374 = fadd fast double %370, %373
  %375 = add nsw i64 %237, -399991
  %376 = getelementptr inbounds double, double* %0, i64 %375
  %377 = load double, double* %376, align 8, !tbaa !6
  %378 = fadd fast double %374, %377
  %379 = add nsw i64 %237, -399990
  %380 = getelementptr inbounds double, double* %0, i64 %379
  %381 = load double, double* %380, align 8, !tbaa !6
  %382 = fadd fast double %378, %381
  %383 = add nsw i64 %237, -399989
  %384 = getelementptr inbounds double, double* %0, i64 %383
  %385 = load double, double* %384, align 8, !tbaa !6
  %386 = fadd fast double %382, %385
  %387 = add nsw i64 %237, -399988
  %388 = getelementptr inbounds double, double* %0, i64 %387
  %389 = load double, double* %388, align 8, !tbaa !6
  %390 = fadd fast double %386, %389
  %391 = add nsw i64 %237, -399987
  %392 = getelementptr inbounds double, double* %0, i64 %391
  %393 = load double, double* %392, align 8, !tbaa !6
  %394 = fadd fast double %390, %393
  %395 = add nsw i64 %237, -399986
  %396 = getelementptr inbounds double, double* %0, i64 %395
  %397 = load double, double* %396, align 8, !tbaa !6
  %398 = fadd fast double %394, %397
  %399 = add nsw i64 %237, -399985
  %400 = getelementptr inbounds double, double* %0, i64 %399
  %401 = load double, double* %400, align 8, !tbaa !6
  %402 = fadd fast double %398, %401
  %403 = add nsw i64 %237, -399984
  %404 = getelementptr inbounds double, double* %0, i64 %403
  %405 = load double, double* %404, align 8, !tbaa !6
  %406 = fadd fast double %402, %405
  %407 = add nsw i64 %237, -399983
  %408 = getelementptr inbounds double, double* %0, i64 %407
  %409 = load double, double* %408, align 8, !tbaa !6
  %410 = fadd fast double %406, %409
  %411 = add nsw i64 %237, -399982
  %412 = getelementptr inbounds double, double* %0, i64 %411
  %413 = load double, double* %412, align 8, !tbaa !6
  %414 = fadd fast double %410, %413
  %415 = fadd fast double %353, %369
  %416 = fadd fast double %357, %373
  %417 = fadd fast double %415, %377
  %418 = fadd fast double %416, %381
  %419 = fsub fast double %417, %418
  %420 = fadd fast double %419, %401
  %421 = fadd fast double %420, %405
  %422 = fadd fast double %409, %413
  %423 = fsub fast double %421, %422
  %424 = fsub fast double %345, %349
  %425 = fadd fast double %424, %369
  %426 = fadd fast double %425, %373
  %427 = fadd fast double %377, %381
  %428 = fsub fast double %426, %427
  %429 = fadd fast double %428, %385
  %430 = fadd fast double %429, %389
  %431 = fadd fast double %393, %397
  %432 = fsub fast double %430, %431
  %433 = fadd fast double %361, %385
  %434 = fadd fast double %365, %389
  %435 = fadd fast double %433, %393
  %436 = fadd fast double %434, %397
  %437 = fadd fast double %435, %401
  %438 = fadd fast double %436, %405
  %439 = fadd fast double %437, %409
  %440 = fadd fast double %438, %413
  %441 = fsub fast double %439, %440
  %442 = fdiv fast double %423, %414
  %443 = fdiv fast double %432, %414
  %444 = fdiv fast double %441, %414
  %445 = fmul fast double %321, 2.000000e+00
  %446 = fdiv fast double %445, %312
  %447 = fsub fast double %446, %442
  %448 = fmul fast double %330, 2.000000e+00
  %449 = fdiv fast double %448, %312
  %450 = fsub fast double %449, %443
  %451 = fmul fast double %339, 2.000000e+00
  %452 = fdiv fast double %451, %312
  %453 = fsub fast double %452, %444
  %454 = fmul fast double %447, %447
  %455 = fmul fast double %450, %450
  %456 = fadd fast double %454, %455
  %457 = fmul fast double %453, %453
  %458 = fadd fast double %456, %457
  %459 = fmul fast double %458, 1.500000e+00
  %460 = fmul fast double %458, 5.000000e-01
  %461 = fsub fast double 0x3FD5555555555555, %460
  %462 = getelementptr inbounds double, double* %0, i64 %237
  store double %461, double* %462, align 8, !tbaa !6
  %463 = fmul fast double %450, 4.500000e+00
  %464 = fadd fast double %463, 3.000000e+00
  %465 = fmul fast double %464, %450
  %466 = fadd fast double %465, 1.000000e+00
  %467 = fsub fast double %466, %459
  %468 = fmul fast double %467, 0x3FAC71C71C71C71C
  %469 = or i64 %237, 1
  %470 = getelementptr inbounds double, double* %0, i64 %469
  store double %468, double* %470, align 8, !tbaa !6
  %471 = fadd fast double %463, -3.000000e+00
  %472 = fmul fast double %471, %450
  %473 = fadd fast double %472, 1.000000e+00
  %474 = fsub fast double %473, %459
  %475 = fmul fast double %474, 0x3FAC71C71C71C71C
  %476 = or i64 %237, 2
  %477 = getelementptr inbounds double, double* %0, i64 %476
  store double %475, double* %477, align 8, !tbaa !6
  %478 = fmul fast double %447, 4.500000e+00
  %479 = fadd fast double %478, 3.000000e+00
  %480 = fmul fast double %479, %447
  %481 = fadd fast double %480, 1.000000e+00
  %482 = fsub fast double %481, %459
  %483 = fmul fast double %482, 0x3FAC71C71C71C71C
  %484 = or i64 %237, 3
  %485 = getelementptr inbounds double, double* %0, i64 %484
  store double %483, double* %485, align 8, !tbaa !6
  %486 = fadd fast double %478, -3.000000e+00
  %487 = fmul fast double %486, %447
  %488 = fadd fast double %487, 1.000000e+00
  %489 = fsub fast double %488, %459
  %490 = fmul fast double %489, 0x3FAC71C71C71C71C
  %491 = add nuw nsw i64 %237, 4
  %492 = getelementptr inbounds double, double* %0, i64 %491
  store double %490, double* %492, align 8, !tbaa !6
  %493 = fmul fast double %453, 4.500000e+00
  %494 = fadd fast double %493, 3.000000e+00
  %495 = fmul fast double %494, %453
  %496 = fadd fast double %495, 1.000000e+00
  %497 = fsub fast double %496, %459
  %498 = fmul fast double %497, 0x3FAC71C71C71C71C
  %499 = add nuw nsw i64 %237, 5
  %500 = getelementptr inbounds double, double* %0, i64 %499
  store double %498, double* %500, align 8, !tbaa !6
  %501 = fadd fast double %493, -3.000000e+00
  %502 = fmul fast double %501, %453
  %503 = fadd fast double %502, 1.000000e+00
  %504 = fsub fast double %503, %459
  %505 = fmul fast double %504, 0x3FAC71C71C71C71C
  %506 = add nuw nsw i64 %237, 6
  %507 = getelementptr inbounds double, double* %0, i64 %506
  store double %505, double* %507, align 8, !tbaa !6
  %508 = fadd fast double %447, %450
  %509 = fmul fast double %508, 4.500000e+00
  %510 = fadd fast double %509, 3.000000e+00
  %511 = fmul fast double %510, %508
  %512 = fadd fast double %511, 1.000000e+00
  %513 = fsub fast double %512, %459
  %514 = fmul fast double %513, 0x3F9C71C71C71C71C
  %515 = add nuw nsw i64 %237, 7
  %516 = getelementptr inbounds double, double* %0, i64 %515
  store double %514, double* %516, align 8, !tbaa !6
  %517 = fneg fast double %447
  %518 = fsub fast double %450, %447
  %519 = fmul fast double %518, 4.500000e+00
  %520 = fadd fast double %519, 3.000000e+00
  %521 = fmul fast double %520, %518
  %522 = fadd fast double %521, 1.000000e+00
  %523 = fsub fast double %522, %459
  %524 = fmul fast double %523, 0x3F9C71C71C71C71C
  %525 = add nuw nsw i64 %237, 8
  %526 = getelementptr inbounds double, double* %0, i64 %525
  store double %524, double* %526, align 8, !tbaa !6
  %527 = fsub fast double %447, %450
  %528 = fmul fast double %527, 4.500000e+00
  %529 = fadd fast double %528, 3.000000e+00
  %530 = fmul fast double %529, %527
  %531 = fadd fast double %530, 1.000000e+00
  %532 = fsub fast double %531, %459
  %533 = fmul fast double %532, 0x3F9C71C71C71C71C
  %534 = add nuw nsw i64 %237, 9
  %535 = getelementptr inbounds double, double* %0, i64 %534
  store double %533, double* %535, align 8, !tbaa !6
  %536 = fsub fast double %517, %450
  %537 = fmul fast double %536, 4.500000e+00
  %538 = fadd fast double %537, 3.000000e+00
  %539 = fmul fast double %538, %536
  %540 = fadd fast double %539, 1.000000e+00
  %541 = fsub fast double %540, %459
  %542 = fmul fast double %541, 0x3F9C71C71C71C71C
  %543 = add nuw nsw i64 %237, 10
  %544 = getelementptr inbounds double, double* %0, i64 %543
  store double %542, double* %544, align 8, !tbaa !6
  %545 = fadd fast double %450, %453
  %546 = fmul fast double %545, 4.500000e+00
  %547 = fadd fast double %546, 3.000000e+00
  %548 = fmul fast double %547, %545
  %549 = fadd fast double %548, 1.000000e+00
  %550 = fsub fast double %549, %459
  %551 = fmul fast double %550, 0x3F9C71C71C71C71C
  %552 = add nuw nsw i64 %237, 11
  %553 = getelementptr inbounds double, double* %0, i64 %552
  store double %551, double* %553, align 8, !tbaa !6
  %554 = fsub fast double %450, %453
  %555 = fmul fast double %554, 4.500000e+00
  %556 = fadd fast double %555, 3.000000e+00
  %557 = fmul fast double %556, %554
  %558 = fadd fast double %557, 1.000000e+00
  %559 = fsub fast double %558, %459
  %560 = fmul fast double %559, 0x3F9C71C71C71C71C
  %561 = add nuw nsw i64 %237, 12
  %562 = getelementptr inbounds double, double* %0, i64 %561
  store double %560, double* %562, align 8, !tbaa !6
  %563 = fsub fast double %453, %450
  %564 = fmul fast double %563, 4.500000e+00
  %565 = fadd fast double %564, 3.000000e+00
  %566 = fmul fast double %565, %563
  %567 = fadd fast double %566, 1.000000e+00
  %568 = fsub fast double %567, %459
  %569 = fmul fast double %568, 0x3F9C71C71C71C71C
  %570 = add nuw nsw i64 %237, 13
  %571 = getelementptr inbounds double, double* %0, i64 %570
  store double %569, double* %571, align 8, !tbaa !6
  %572 = fsub fast double 3.000000e+00, %546
  %573 = fmul fast double %572, %545
  %574 = fadd fast double %573, %459
  %575 = fmul fast double %574, 0x3F9C71C71C71C71C
  %576 = fsub fast double 0x3F9C71C71C71C71C, %575
  %577 = add nuw nsw i64 %237, 14
  %578 = getelementptr inbounds double, double* %0, i64 %577
  store double %576, double* %578, align 8, !tbaa !6
  %579 = fadd fast double %447, %453
  %580 = fmul fast double %579, 4.500000e+00
  %581 = fadd fast double %580, 3.000000e+00
  %582 = fmul fast double %581, %579
  %583 = fadd fast double %582, 1.000000e+00
  %584 = fsub fast double %583, %459
  %585 = fmul fast double %584, 0x3F9C71C71C71C71C
  %586 = add nuw nsw i64 %237, 15
  %587 = getelementptr inbounds double, double* %0, i64 %586
  store double %585, double* %587, align 8, !tbaa !6
  %588 = fsub fast double %447, %453
  %589 = fmul fast double %588, 4.500000e+00
  %590 = fadd fast double %589, 3.000000e+00
  %591 = fmul fast double %590, %588
  %592 = fadd fast double %591, 1.000000e+00
  %593 = fsub fast double %592, %459
  %594 = fmul fast double %593, 0x3F9C71C71C71C71C
  %595 = add nuw nsw i64 %237, 16
  %596 = getelementptr inbounds double, double* %0, i64 %595
  store double %594, double* %596, align 8, !tbaa !6
  %597 = fsub fast double %453, %447
  %598 = fmul fast double %597, 4.500000e+00
  %599 = fadd fast double %598, 3.000000e+00
  %600 = fmul fast double %599, %597
  %601 = fadd fast double %600, 1.000000e+00
  %602 = fsub fast double %601, %459
  %603 = fmul fast double %602, 0x3F9C71C71C71C71C
  %604 = add nuw nsw i64 %237, 17
  %605 = getelementptr inbounds double, double* %0, i64 %604
  store double %603, double* %605, align 8, !tbaa !6
  %606 = fsub fast double %517, %453
  %607 = fmul fast double %606, 4.500000e+00
  %608 = fadd fast double %607, 3.000000e+00
  %609 = fmul fast double %608, %606
  %610 = fadd fast double %609, 1.000000e+00
  %611 = fsub fast double %610, %459
  %612 = fmul fast double %611, 0x3F9C71C71C71C71C
  %613 = add nuw nsw i64 %237, 18
  %614 = getelementptr inbounds double, double* %0, i64 %613
  store double %612, double* %614, align 8, !tbaa !6
  %615 = add nuw nsw i64 %237, 20
  %616 = icmp ult i64 %237, 25999980
  br i1 %616, label %236, label %617, !llvm.loop !26

617:                                              ; preds = %236
  ret void
}

; Function Attrs: nofree nounwind uwtable
define dso_local void @LBM_showGridStatistics(double* nocapture readonly %0) local_unnamed_addr #9 {
  br label %2

2:                                                ; preds = %1, %143
  %3 = phi i64 [ 0, %1 ], [ %149, %143 ]
  %4 = phi double [ 0.000000e+00, %1 ], [ %90, %143 ]
  %5 = phi i32 [ 0, %1 ], [ %148, %143 ]
  %6 = phi double [ -1.000000e+30, %1 ], [ %89, %143 ]
  %7 = phi double [ 1.000000e+30, %1 ], [ %87, %143 ]
  %8 = phi i32 [ 0, %1 ], [ %147, %143 ]
  %9 = phi double [ -1.000000e+30, %1 ], [ %146, %143 ]
  %10 = phi double [ 1.000000e+30, %1 ], [ %145, %143 ]
  %11 = phi i32 [ 0, %1 ], [ %144, %143 ]
  %12 = getelementptr inbounds double, double* %0, i64 %3
  %13 = load double, double* %12, align 8, !tbaa !6
  %14 = or i64 %3, 1
  %15 = getelementptr inbounds double, double* %0, i64 %14
  %16 = load double, double* %15, align 8, !tbaa !6
  %17 = fadd fast double %16, %13
  %18 = or i64 %3, 2
  %19 = getelementptr inbounds double, double* %0, i64 %18
  %20 = load double, double* %19, align 8, !tbaa !6
  %21 = fadd fast double %17, %20
  %22 = or i64 %3, 3
  %23 = getelementptr inbounds double, double* %0, i64 %22
  %24 = load double, double* %23, align 8, !tbaa !6
  %25 = fadd fast double %21, %24
  %26 = add nuw nsw i64 %3, 4
  %27 = getelementptr inbounds double, double* %0, i64 %26
  %28 = load double, double* %27, align 8, !tbaa !6
  %29 = fadd fast double %25, %28
  %30 = add nuw nsw i64 %3, 5
  %31 = getelementptr inbounds double, double* %0, i64 %30
  %32 = load double, double* %31, align 8, !tbaa !6
  %33 = fadd fast double %29, %32
  %34 = add nuw nsw i64 %3, 6
  %35 = getelementptr inbounds double, double* %0, i64 %34
  %36 = load double, double* %35, align 8, !tbaa !6
  %37 = fadd fast double %33, %36
  %38 = add nuw nsw i64 %3, 7
  %39 = getelementptr inbounds double, double* %0, i64 %38
  %40 = load double, double* %39, align 8, !tbaa !6
  %41 = fadd fast double %37, %40
  %42 = add nuw nsw i64 %3, 8
  %43 = getelementptr inbounds double, double* %0, i64 %42
  %44 = load double, double* %43, align 8, !tbaa !6
  %45 = fadd fast double %41, %44
  %46 = add nuw nsw i64 %3, 9
  %47 = getelementptr inbounds double, double* %0, i64 %46
  %48 = load double, double* %47, align 8, !tbaa !6
  %49 = fadd fast double %45, %48
  %50 = add nuw nsw i64 %3, 10
  %51 = getelementptr inbounds double, double* %0, i64 %50
  %52 = load double, double* %51, align 8, !tbaa !6
  %53 = fadd fast double %49, %52
  %54 = add nuw nsw i64 %3, 11
  %55 = getelementptr inbounds double, double* %0, i64 %54
  %56 = load double, double* %55, align 8, !tbaa !6
  %57 = fadd fast double %53, %56
  %58 = add nuw nsw i64 %3, 12
  %59 = getelementptr inbounds double, double* %0, i64 %58
  %60 = load double, double* %59, align 8, !tbaa !6
  %61 = fadd fast double %57, %60
  %62 = add nuw nsw i64 %3, 13
  %63 = getelementptr inbounds double, double* %0, i64 %62
  %64 = load double, double* %63, align 8, !tbaa !6
  %65 = fadd fast double %61, %64
  %66 = add nuw nsw i64 %3, 14
  %67 = getelementptr inbounds double, double* %0, i64 %66
  %68 = load double, double* %67, align 8, !tbaa !6
  %69 = fadd fast double %65, %68
  %70 = add nuw nsw i64 %3, 15
  %71 = getelementptr inbounds double, double* %0, i64 %70
  %72 = load double, double* %71, align 8, !tbaa !6
  %73 = fadd fast double %69, %72
  %74 = add nuw nsw i64 %3, 16
  %75 = getelementptr inbounds double, double* %0, i64 %74
  %76 = load double, double* %75, align 8, !tbaa !6
  %77 = fadd fast double %73, %76
  %78 = add nuw nsw i64 %3, 17
  %79 = getelementptr inbounds double, double* %0, i64 %78
  %80 = load double, double* %79, align 8, !tbaa !6
  %81 = fadd fast double %77, %80
  %82 = add nuw nsw i64 %3, 18
  %83 = getelementptr inbounds double, double* %0, i64 %82
  %84 = load double, double* %83, align 8, !tbaa !6
  %85 = fadd fast double %81, %84
  %86 = fcmp fast olt double %85, %7
  %87 = select i1 %86, double %85, double %7
  %88 = fcmp fast ogt double %85, %6
  %89 = select i1 %88, double %85, double %6
  %90 = fadd fast double %85, %4
  %91 = add nuw nsw i64 %3, 19
  %92 = getelementptr inbounds double, double* %0, i64 %91
  %93 = bitcast double* %92 to i32*
  %94 = load i32, i32* %93, align 4, !tbaa !8
  %95 = and i32 %94, 1
  %96 = icmp eq i32 %95, 0
  br i1 %96, label %99, label %97

97:                                               ; preds = %2
  %98 = add nsw i32 %5, 1
  br label %143

99:                                               ; preds = %2
  %100 = lshr i32 %94, 1
  %101 = and i32 %100, 1
  %102 = xor i32 %101, 1
  %103 = add nsw i32 %102, %11
  %104 = add nsw i32 %101, %8
  %105 = fadd fast double %24, %40
  %106 = fadd fast double %28, %44
  %107 = fadd fast double %105, %48
  %108 = fadd fast double %106, %52
  %109 = fsub fast double %107, %108
  %110 = fadd fast double %109, %72
  %111 = fadd fast double %110, %76
  %112 = fadd fast double %80, %84
  %113 = fsub fast double %111, %112
  %114 = fsub fast double %16, %20
  %115 = fadd fast double %114, %40
  %116 = fadd fast double %115, %44
  %117 = fadd fast double %48, %52
  %118 = fsub fast double %116, %117
  %119 = fadd fast double %118, %56
  %120 = fadd fast double %119, %60
  %121 = fadd fast double %64, %68
  %122 = fsub fast double %120, %121
  %123 = fadd fast double %32, %56
  %124 = fadd fast double %36, %60
  %125 = fadd fast double %123, %64
  %126 = fadd fast double %124, %68
  %127 = fadd fast double %125, %72
  %128 = fadd fast double %126, %76
  %129 = fadd fast double %127, %80
  %130 = fadd fast double %128, %84
  %131 = fsub fast double %129, %130
  %132 = fmul fast double %113, %113
  %133 = fmul fast double %122, %122
  %134 = fadd fast double %132, %133
  %135 = fmul fast double %131, %131
  %136 = fadd fast double %134, %135
  %137 = fmul fast double %85, %85
  %138 = fdiv fast double %136, %137
  %139 = fcmp fast olt double %138, %10
  %140 = select i1 %139, double %138, double %10
  %141 = fcmp fast ogt double %138, %9
  br i1 %141, label %142, label %143

142:                                              ; preds = %99
  br label %143

143:                                              ; preds = %97, %142, %99
  %144 = phi i32 [ %11, %97 ], [ %103, %142 ], [ %103, %99 ]
  %145 = phi double [ %10, %97 ], [ %140, %142 ], [ %140, %99 ]
  %146 = phi double [ %9, %97 ], [ %138, %142 ], [ %9, %99 ]
  %147 = phi i32 [ %8, %97 ], [ %104, %142 ], [ %104, %99 ]
  %148 = phi i32 [ %98, %97 ], [ %5, %142 ], [ %5, %99 ]
  %149 = add nuw nsw i64 %3, 20
  %150 = icmp ult i64 %3, 25999980
  br i1 %150, label %2, label %151, !llvm.loop !27

151:                                              ; preds = %143
  %152 = tail call fast double @__sqrt_finite(double %145) #16
  %153 = tail call fast double @__sqrt_finite(double %146) #16
  %154 = tail call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([148 x i8], [148 x i8]* @.str.2, i64 0, i64 0), i32 %148, i32 %147, i32 %144, double %87, double %89, double %90, double %152, double %153)
  ret void
}

; Function Attrs: nofree nounwind readnone
declare dso_local double @__sqrt_finite(double) local_unnamed_addr #12

; Function Attrs: nofree nounwind uwtable
define dso_local void @LBM_storeVelocityField(double* nocapture readonly %0, i8* nocapture readonly %1, i32 %2) local_unnamed_addr #9 {
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = bitcast float* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #14
  %8 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #14
  %9 = bitcast float* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #14
  %10 = icmp eq i32 %2, 0
  %11 = select i1 %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0)
  %12 = tail call %struct._IO_FILE* @fopen(i8* %1, i8* %11)
  br label %13

13:                                               ; preds = %3, %147
  %14 = phi i64 [ 0, %3 ], [ %148, %147 ]
  %15 = mul nuw nsw i64 %14, 10000
  br label %16

16:                                               ; preds = %13, %144
  %17 = phi i64 [ 0, %13 ], [ %145, %144 ]
  %18 = mul nuw nsw i64 %17, 100
  %19 = add nuw nsw i64 %18, %15
  br label %20

20:                                               ; preds = %16, %141
  %21 = phi i64 [ 0, %16 ], [ %142, %141 ]
  %22 = add nuw nsw i64 %19, %21
  %23 = mul nuw nsw i64 %22, 20
  %24 = getelementptr inbounds double, double* %0, i64 %23
  %25 = load double, double* %24, align 8, !tbaa !6
  %26 = or i64 %23, 1
  %27 = getelementptr inbounds double, double* %0, i64 %26
  %28 = load double, double* %27, align 8, !tbaa !6
  %29 = fadd fast double %28, %25
  %30 = or i64 %23, 2
  %31 = getelementptr inbounds double, double* %0, i64 %30
  %32 = load double, double* %31, align 8, !tbaa !6
  %33 = fadd fast double %29, %32
  %34 = or i64 %23, 3
  %35 = getelementptr inbounds double, double* %0, i64 %34
  %36 = load double, double* %35, align 8, !tbaa !6
  %37 = fadd fast double %33, %36
  %38 = add nuw nsw i64 %23, 4
  %39 = getelementptr inbounds double, double* %0, i64 %38
  %40 = load double, double* %39, align 8, !tbaa !6
  %41 = fadd fast double %37, %40
  %42 = add nuw nsw i64 %23, 5
  %43 = getelementptr inbounds double, double* %0, i64 %42
  %44 = load double, double* %43, align 8, !tbaa !6
  %45 = fadd fast double %41, %44
  %46 = add nuw nsw i64 %23, 6
  %47 = getelementptr inbounds double, double* %0, i64 %46
  %48 = load double, double* %47, align 8, !tbaa !6
  %49 = fadd fast double %45, %48
  %50 = add nuw nsw i64 %23, 7
  %51 = getelementptr inbounds double, double* %0, i64 %50
  %52 = load double, double* %51, align 8, !tbaa !6
  %53 = fadd fast double %49, %52
  %54 = add nuw nsw i64 %23, 8
  %55 = getelementptr inbounds double, double* %0, i64 %54
  %56 = load double, double* %55, align 8, !tbaa !6
  %57 = fadd fast double %53, %56
  %58 = add nuw nsw i64 %23, 9
  %59 = getelementptr inbounds double, double* %0, i64 %58
  %60 = load double, double* %59, align 8, !tbaa !6
  %61 = fadd fast double %57, %60
  %62 = add nuw nsw i64 %23, 10
  %63 = getelementptr inbounds double, double* %0, i64 %62
  %64 = load double, double* %63, align 8, !tbaa !6
  %65 = fadd fast double %61, %64
  %66 = add nuw nsw i64 %23, 11
  %67 = getelementptr inbounds double, double* %0, i64 %66
  %68 = load double, double* %67, align 8, !tbaa !6
  %69 = fadd fast double %65, %68
  %70 = add nuw nsw i64 %23, 12
  %71 = getelementptr inbounds double, double* %0, i64 %70
  %72 = load double, double* %71, align 8, !tbaa !6
  %73 = fadd fast double %69, %72
  %74 = add nuw nsw i64 %23, 13
  %75 = getelementptr inbounds double, double* %0, i64 %74
  %76 = load double, double* %75, align 8, !tbaa !6
  %77 = fadd fast double %73, %76
  %78 = add nuw nsw i64 %23, 14
  %79 = getelementptr inbounds double, double* %0, i64 %78
  %80 = load double, double* %79, align 8, !tbaa !6
  %81 = fadd fast double %77, %80
  %82 = add nuw nsw i64 %23, 15
  %83 = getelementptr inbounds double, double* %0, i64 %82
  %84 = load double, double* %83, align 8, !tbaa !6
  %85 = fadd fast double %81, %84
  %86 = add nuw nsw i64 %23, 16
  %87 = getelementptr inbounds double, double* %0, i64 %86
  %88 = load double, double* %87, align 8, !tbaa !6
  %89 = fadd fast double %85, %88
  %90 = add nuw nsw i64 %23, 17
  %91 = getelementptr inbounds double, double* %0, i64 %90
  %92 = load double, double* %91, align 8, !tbaa !6
  %93 = fadd fast double %89, %92
  %94 = add nuw nsw i64 %23, 18
  %95 = getelementptr inbounds double, double* %0, i64 %94
  %96 = load double, double* %95, align 8, !tbaa !6
  %97 = fadd fast double %93, %96
  %98 = fptrunc double %97 to float
  %99 = fadd fast double %36, %52
  %100 = fadd fast double %40, %56
  %101 = fadd fast double %99, %60
  %102 = fadd fast double %100, %64
  %103 = fsub fast double %101, %102
  %104 = fadd fast double %103, %84
  %105 = fadd fast double %104, %88
  %106 = fadd fast double %92, %96
  %107 = fsub fast double %105, %106
  %108 = fptrunc double %107 to float
  %109 = fsub fast double %28, %32
  %110 = fadd fast double %109, %52
  %111 = fadd fast double %110, %56
  %112 = fadd fast double %60, %64
  %113 = fsub fast double %111, %112
  %114 = fadd fast double %113, %68
  %115 = fadd fast double %114, %72
  %116 = fadd fast double %76, %80
  %117 = fsub fast double %115, %116
  %118 = fptrunc double %117 to float
  %119 = fadd fast double %44, %68
  %120 = fadd fast double %48, %72
  %121 = fadd fast double %119, %76
  %122 = fadd fast double %120, %80
  %123 = fadd fast double %121, %84
  %124 = fadd fast double %122, %88
  %125 = fadd fast double %123, %92
  %126 = fadd fast double %124, %96
  %127 = fsub fast double %125, %126
  %128 = fptrunc double %127 to float
  %129 = fdiv fast float %108, %98
  store float %129, float* %4, align 4, !tbaa !28
  %130 = fdiv fast float %118, %98
  store float %130, float* %5, align 4, !tbaa !28
  %131 = fdiv fast float %128, %98
  store float %131, float* %6, align 4, !tbaa !28
  br i1 %10, label %136, label %132

132:                                              ; preds = %20
  %133 = call i64 @fwrite(i8* nonnull %7, i64 4, i64 1, %struct._IO_FILE* %12) #14
  %134 = call i64 @fwrite(i8* nonnull %8, i64 4, i64 1, %struct._IO_FILE* %12) #14
  %135 = call i64 @fwrite(i8* nonnull %9, i64 4, i64 1, %struct._IO_FILE* %12) #14
  br label %141

136:                                              ; preds = %20
  %137 = fpext float %129 to double
  %138 = fpext float %130 to double
  %139 = fpext float %131 to double
  %140 = tail call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), double %137, double %138, double %139)
  br label %141

141:                                              ; preds = %132, %136
  %142 = add nuw nsw i64 %21, 1
  %143 = icmp eq i64 %142, 100
  br i1 %143, label %144, label %20, !llvm.loop !30

144:                                              ; preds = %141
  %145 = add nuw nsw i64 %17, 1
  %146 = icmp eq i64 %145, 100
  br i1 %146, label %147, label %16, !llvm.loop !31

147:                                              ; preds = %144
  %148 = add nuw nsw i64 %14, 1
  %149 = icmp eq i64 %148, 130
  br i1 %149, label %150, label %13, !llvm.loop !32

150:                                              ; preds = %147
  %151 = tail call i32 @fclose(%struct._IO_FILE* %12)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #14
  ret void
}

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @fprintf(%struct._IO_FILE* nocapture noundef, i8* nocapture noundef readonly, ...) local_unnamed_addr #3

; Function Attrs: nounwind uwtable
define dso_local void @LBM_compareVelocityField(double* nocapture readonly %0, i8* nocapture readonly %1, i32 %2) local_unnamed_addr #0 {
  %4 = alloca float, align 4
  %5 = alloca float, align 4
  %6 = alloca float, align 4
  %7 = bitcast float* %4 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %7) #14
  %8 = bitcast float* %5 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %8) #14
  %9 = bitcast float* %6 to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %9) #14
  %10 = icmp eq i32 %2, 0
  %11 = select i1 %10, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)
  %12 = tail call %struct._IO_FILE* @fopen(i8* %1, i8* %11)
  br label %13

13:                                               ; preds = %3, %162
  %14 = phi i64 [ 0, %3 ], [ %163, %162 ]
  %15 = phi float [ 0xC6293E5940000000, %3 ], [ %156, %162 ]
  %16 = mul nuw nsw i64 %14, 10000
  br label %17

17:                                               ; preds = %13, %159
  %18 = phi i64 [ 0, %13 ], [ %160, %159 ]
  %19 = phi float [ %15, %13 ], [ %156, %159 ]
  %20 = mul nuw nsw i64 %18, 100
  %21 = add nuw nsw i64 %20, %16
  br label %22

22:                                               ; preds = %17, %137
  %23 = phi i64 [ 0, %17 ], [ %157, %137 ]
  %24 = phi float [ %19, %17 ], [ %156, %137 ]
  %25 = add nuw nsw i64 %21, %23
  %26 = mul nuw nsw i64 %25, 20
  %27 = getelementptr inbounds double, double* %0, i64 %26
  %28 = load double, double* %27, align 8, !tbaa !6
  %29 = or i64 %26, 1
  %30 = getelementptr inbounds double, double* %0, i64 %29
  %31 = load double, double* %30, align 8, !tbaa !6
  %32 = fadd fast double %31, %28
  %33 = or i64 %26, 2
  %34 = getelementptr inbounds double, double* %0, i64 %33
  %35 = load double, double* %34, align 8, !tbaa !6
  %36 = fadd fast double %32, %35
  %37 = or i64 %26, 3
  %38 = getelementptr inbounds double, double* %0, i64 %37
  %39 = load double, double* %38, align 8, !tbaa !6
  %40 = fadd fast double %36, %39
  %41 = add nuw nsw i64 %26, 4
  %42 = getelementptr inbounds double, double* %0, i64 %41
  %43 = load double, double* %42, align 8, !tbaa !6
  %44 = fadd fast double %40, %43
  %45 = add nuw nsw i64 %26, 5
  %46 = getelementptr inbounds double, double* %0, i64 %45
  %47 = load double, double* %46, align 8, !tbaa !6
  %48 = fadd fast double %44, %47
  %49 = add nuw nsw i64 %26, 6
  %50 = getelementptr inbounds double, double* %0, i64 %49
  %51 = load double, double* %50, align 8, !tbaa !6
  %52 = fadd fast double %48, %51
  %53 = add nuw nsw i64 %26, 7
  %54 = getelementptr inbounds double, double* %0, i64 %53
  %55 = load double, double* %54, align 8, !tbaa !6
  %56 = fadd fast double %52, %55
  %57 = add nuw nsw i64 %26, 8
  %58 = getelementptr inbounds double, double* %0, i64 %57
  %59 = load double, double* %58, align 8, !tbaa !6
  %60 = fadd fast double %56, %59
  %61 = add nuw nsw i64 %26, 9
  %62 = getelementptr inbounds double, double* %0, i64 %61
  %63 = load double, double* %62, align 8, !tbaa !6
  %64 = fadd fast double %60, %63
  %65 = add nuw nsw i64 %26, 10
  %66 = getelementptr inbounds double, double* %0, i64 %65
  %67 = load double, double* %66, align 8, !tbaa !6
  %68 = fadd fast double %64, %67
  %69 = add nuw nsw i64 %26, 11
  %70 = getelementptr inbounds double, double* %0, i64 %69
  %71 = load double, double* %70, align 8, !tbaa !6
  %72 = fadd fast double %68, %71
  %73 = add nuw nsw i64 %26, 12
  %74 = getelementptr inbounds double, double* %0, i64 %73
  %75 = load double, double* %74, align 8, !tbaa !6
  %76 = fadd fast double %72, %75
  %77 = add nuw nsw i64 %26, 13
  %78 = getelementptr inbounds double, double* %0, i64 %77
  %79 = load double, double* %78, align 8, !tbaa !6
  %80 = fadd fast double %76, %79
  %81 = add nuw nsw i64 %26, 14
  %82 = getelementptr inbounds double, double* %0, i64 %81
  %83 = load double, double* %82, align 8, !tbaa !6
  %84 = fadd fast double %80, %83
  %85 = add nuw nsw i64 %26, 15
  %86 = getelementptr inbounds double, double* %0, i64 %85
  %87 = load double, double* %86, align 8, !tbaa !6
  %88 = fadd fast double %84, %87
  %89 = add nuw nsw i64 %26, 16
  %90 = getelementptr inbounds double, double* %0, i64 %89
  %91 = load double, double* %90, align 8, !tbaa !6
  %92 = fadd fast double %88, %91
  %93 = add nuw nsw i64 %26, 17
  %94 = getelementptr inbounds double, double* %0, i64 %93
  %95 = load double, double* %94, align 8, !tbaa !6
  %96 = fadd fast double %92, %95
  %97 = add nuw nsw i64 %26, 18
  %98 = getelementptr inbounds double, double* %0, i64 %97
  %99 = load double, double* %98, align 8, !tbaa !6
  %100 = fadd fast double %96, %99
  %101 = fadd fast double %39, %55
  %102 = fadd fast double %43, %59
  %103 = fadd fast double %101, %63
  %104 = fadd fast double %102, %67
  %105 = fsub fast double %103, %104
  %106 = fadd fast double %105, %87
  %107 = fadd fast double %106, %91
  %108 = fadd fast double %95, %99
  %109 = fsub fast double %107, %108
  %110 = fsub fast double %31, %35
  %111 = fadd fast double %110, %55
  %112 = fadd fast double %111, %59
  %113 = fadd fast double %63, %67
  %114 = fsub fast double %112, %113
  %115 = fadd fast double %114, %71
  %116 = fadd fast double %115, %75
  %117 = fadd fast double %79, %83
  %118 = fsub fast double %116, %117
  %119 = fadd fast double %47, %71
  %120 = fadd fast double %51, %75
  %121 = fadd fast double %119, %79
  %122 = fadd fast double %120, %83
  %123 = fadd fast double %121, %87
  %124 = fadd fast double %122, %91
  %125 = fadd fast double %123, %95
  %126 = fadd fast double %124, %99
  %127 = fsub fast double %125, %126
  %128 = fdiv fast double %109, %100
  %129 = fdiv fast double %118, %100
  %130 = fdiv fast double %127, %100
  br i1 %10, label %135, label %131

131:                                              ; preds = %22
  %132 = call i64 @fread(i8* nonnull %7, i64 4, i64 1, %struct._IO_FILE* %12) #14
  %133 = call i64 @fread(i8* nonnull %8, i64 4, i64 1, %struct._IO_FILE* %12) #14
  %134 = call i64 @fread(i8* nonnull %9, i64 4, i64 1, %struct._IO_FILE* %12) #14
  br label %137

135:                                              ; preds = %22
  %136 = call i32 (%struct._IO_FILE*, i8*, ...) @__isoc99_fscanf(%struct._IO_FILE* %12, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0), float* nonnull %4, float* nonnull %5, float* nonnull %6) #14
  br label %137

137:                                              ; preds = %135, %131
  %138 = load float, float* %4, align 4, !tbaa !28
  %139 = fpext float %138 to double
  %140 = fsub fast double %128, %139
  %141 = fptrunc double %140 to float
  %142 = load float, float* %5, align 4, !tbaa !28
  %143 = fpext float %142 to double
  %144 = fsub fast double %129, %143
  %145 = fptrunc double %144 to float
  %146 = load float, float* %6, align 4, !tbaa !28
  %147 = fpext float %146 to double
  %148 = fsub fast double %130, %147
  %149 = fptrunc double %148 to float
  %150 = fmul fast float %141, %141
  %151 = fmul fast float %145, %145
  %152 = fadd fast float %151, %150
  %153 = fmul fast float %149, %149
  %154 = fadd fast float %152, %153
  %155 = fcmp fast ogt float %154, %24
  %156 = select i1 %155, float %154, float %24
  %157 = add nuw nsw i64 %23, 1
  %158 = icmp eq i64 %157, 100
  br i1 %158, label %159, label %22, !llvm.loop !33

159:                                              ; preds = %137
  %160 = add nuw nsw i64 %18, 1
  %161 = icmp eq i64 %160, 100
  br i1 %161, label %162, label %17, !llvm.loop !34

162:                                              ; preds = %159
  %163 = add nuw nsw i64 %14, 1
  %164 = icmp eq i64 %163, 130
  br i1 %164, label %165, label %13, !llvm.loop !35

165:                                              ; preds = %162
  %166 = fpext float %156 to double
  %167 = call fast double @__sqrt_finite(double %166) #16
  %168 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([43 x i8], [43 x i8]* @.str.8, i64 0, i64 0), double %167)
  %169 = call i32 @fclose(%struct._IO_FILE* %12)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %9) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %8) #14
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %7) #14
  ret void
}

declare dso_local i32 @__isoc99_fscanf(%struct._IO_FILE*, i8*, ...) local_unnamed_addr #13

; Function Attrs: nofree nounwind
declare dso_local noundef i64 @fwrite(i8* nocapture noundef, i64 noundef, i64 noundef, %struct._IO_FILE* nocapture noundef) local_unnamed_addr #3

; Function Attrs: nofree nounwind
declare dso_local noundef i64 @fread(i8* nocapture noundef, i64 noundef, i64 noundef, %struct._IO_FILE* nocapture noundef) local_unnamed_addr #3

attributes #0 = { nounwind uwtable "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #1 = { argmemonly nofree nosync nounwind willreturn }
attributes #2 = { inaccessiblememonly nofree nounwind willreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #3 = { nofree nounwind "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #4 = { noreturn nounwind "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #5 = { nounwind uwtable willreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #6 = { inaccessiblemem_or_argmemonly nounwind willreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #7 = { nofree norecurse nounwind uwtable writeonly "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #8 = { nofree norecurse nounwind uwtable willreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #9 = { nofree nounwind uwtable "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #10 = { nofree norecurse nounwind uwtable "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #11 = { nofree norecurse nounwind uwtable "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="128" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #12 = { nofree nounwind readnone "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #13 = { "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+avx,+cx8,+fxsr,+mmx,+popcnt,+sse,+sse2,+sse3,+sse4.1,+sse4.2,+ssse3,+x87,+xsave" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #14 = { nounwind }
attributes #15 = { noreturn nounwind }
attributes #16 = { nounwind readnone }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 13.0.0 (git@github.com:kobeliu85/LLVM.git 57fd4d6aa4a75c0f5822b8bc5b8aa7f5139d0f45)"}
!2 = !{!3, !3, i64 0}
!3 = !{!"any pointer", !4, i64 0}
!4 = !{!"omnipotent char", !5, i64 0}
!5 = !{!"Simple C/C++ TBAA"}
!6 = !{!7, !7, i64 0}
!7 = !{!"double", !4, i64 0}
!8 = !{!9, !9, i64 0}
!9 = !{!"int", !4, i64 0}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
!12 = distinct !{!12, !11}
!13 = distinct !{!13, !11}
!14 = distinct !{!14, !11}
!15 = distinct !{!15, !11}
!16 = distinct !{!16, !11}
!17 = distinct !{!17, !11}
!18 = distinct !{!18, !11}
!19 = distinct !{!19, !11}
!20 = distinct !{!20, !11}
!21 = distinct !{!21, !11}
!22 = distinct !{!22, !11}
!23 = distinct !{!23, !11}
!24 = distinct !{!24, !11}
!25 = distinct !{!25, !11}
!26 = distinct !{!26, !11}
!27 = distinct !{!27, !11}
!28 = !{!29, !29, i64 0}
!29 = !{!"float", !4, i64 0}
!30 = distinct !{!30, !11}
!31 = distinct !{!31, !11}
!32 = distinct !{!32, !11}
!33 = distinct !{!33, !11}
!34 = distinct !{!34, !11}
!35 = distinct !{!35, !11}

LV: Checking a loop in "LBM_loadObstacleFile" from lbm.c
run-time check is enabled 
run-time check is enabled 
run-time check is enabled 
run-time check is enabled 
Finish!


LV: Checking a loop in "LBM_initializeSpecialCellsForLDC" from lbm.c
run-time check is enabled 
run-time check is enabled 
run-time check is enabled 
run-time check is enabled 
Finish!


LV: Checking a loop in "LBM_initializeSpecialCellsForLDC" from lbm.c
run-time check is enabled 
run-time check is enabled 
run-time check is enabled 
run-time check is enabled 
Finish!


LV: Checking a loop in "LBM_initializeSpecialCellsForChannel" from lbm.c
run-time check is enabled 
run-time check is enabled 
run-time check is enabled 
run-time check is enabled 
Finish!


LV: Checking a loop in "LBM_performStreamCollideBGK" from lbm.c
run-time check is enabled 
run-time check is enabled 
run-time check is enabled 
Finish!

Finished 2
Finished 3
Finished ---
Finished 4

LV: Checking a loop in "LBM_performStreamCollideTRT" from lbm.c
run-time check is enabled 
run-time check is enabled 
run-time check is enabled 
Finish!

Finished 2
Finished 3
Finished ---
Finished 4

LV: Checking a loop in "LBM_handleInOutFlow" from lbm.c
run-time check is enabled 
run-time check is enabled 
run-time check is enabled 
Finish!


LV: Checking a loop in "LBM_handleInOutFlow" from lbm.c
run-time check is enabled 
run-time check is enabled 
run-time check is enabled 
Finish!

/home/labuser/ssd/Code-Backup/llvm-project///build//bin/clang -m64       -Ofast -mavx         lbm.o main.o             -lm         -o lbm_r  
